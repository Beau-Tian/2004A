郭腾作业:
1.原型链的理解:
(1)函数必然要有prototype和__proto两个属性,所有的函数都是Function实例的对象;

(2)对象必然有__proto__属性,但不一定有propotype,实例的对象通过__proto__属性连接到构造函数的prototype属性上,
    而原型链就是从这两者的关系开始一层层往下找的关系;

2.第二题答案:
2 , 1 , undefined , 不打印因为没调用 , 1 , 不打印因为没调用 , 2 ;

3.第三题答案:
5 , 1 , 3 , 5 , 1 ;

4.第四题答案:
1 , 3 , 1 ;

5.第五题答案:
(1)for(var i=0;i<10;i++){
            console.log(i)
        }

(2)function bb() {
            var arr = [];
            for (var i = 0; i < 10; i++) {
                (function (j) {
                    arr[j] = i;
                }(i));
            }
            return arr;
        }
        var arr1 = bb();

        for (var k = 0; k < 10; k++) {
            document.write(arr1[k] + " ");
        }

(3)for (let i = 0; i < 10; i++) {
            setTimeout(() => {
                document.write(i + '<br>')
            }, 100)
        }

6.第六题;
^ (? ![0 - 9] + $)(?![a - zA - Z] + $)[0 - 9A - Za - z]{ 6, 16 } $

7.第七题;
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
c1.prototype === C.__proto__.prototype?
c1.__proto__ === C.prototype ?
c1.__proto__.prototype ===   c1.prototype?
c1.__proto__.__proto__ === B.prototype ?
c1.__proto__.__proto__.__proto__ ===  A.prototype ?
c1.__proto__.constructor === C.prototype?
c1.__proto__.constructor.prototype === C.prototype?
c1.__proto__.constructor.prototype.constructor ===C ?
C.prototype.constructor === C?
C.prototype.constructor.prototype === c1.__proto__ ?
C.prototype.constructor.prototype.constructor ===  C?
C.prototype.__proto__ === B.prototype ?