一,写出自己理解的原型和原型链
个人的简单理解 
每个函数都是有protothype属性的,他默认指向原型对象(一个空的object实例)
而且原型对象(空的object实例)中的constructor属性指向_proto_
也就是_proto_的值等于prototype属性
prototype-->原型对象)(空的obj实例)-->_proto_
修改原型时通过prototype属性修改原型
原型链就是:
访问一个对象的属性是,先在自身属性中查找,找到返回
没有在沿着_proto_这条链向上查找,找到返回,如果没有找到,返回undefined


二.function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
本题考验的js引擎的执行顺序
函数被调用 在函数内部先创建一个AO对象
1,function y(num){
  AO{
	
   }
 console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2)
2,先是形参 赋值给变量 num =undefined -->实参和变量的统一 num=1
3,声明式函数提升  到匿名函数时在把值赋上去
1,function y(num){
  AO{
    num = fn(){
       console.log(2);
   }		
   }
   console.log(num);
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   console.log(fn);
}
y(2)
打印结果
2
1
fn(){
  console.log(2)
}
fn(){
  console.log(1)
}
fn(){
  console.log(1)
}

三题 
function y() {
    console.log(num);
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
执行时先创建AO对象
进行变量和形参统一 变量和实参统一 由于当前没有参数 继续向下执行 进行声明函数的提升 显示log(3) 然后是log为5的 然后打印执行 执行到变量时 变量进行赋值
function y() {
AO{
var  num = 	  function num() { console.log(3); } -->  function num() { console.log(5); }
}
    console.log(num);
    num = 1;
    console.log(num);
  
  
    console.log(num);
}
y();

打印 
log(5)
1
1

四题:
function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();
先创建AO对象 由于没有参数 就先进行声明函数的提升 在进行变量的赋值  
function y() {    
AO{
num =  function num() { console.log(3); }
}
    var num = 1;
    console.log(num);
    console.log(num);
}
y()
打印
1
1

五题
for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
由于使用的是var 会造成变量的污染

//写出三种能正常打印0-9的方法
1,
for(var i = 0 ;i<10;i++){

console.log(i)
}
2,
for(let  i = 0;i<10;i++){ 
   setTimeout(function()=>{ console.log(i); },100);
 }
3
for(let  i = 0;i<10;i++){ 
   setTimeout(()=>{ console.log(i); },100);
 }

六题
密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
/^[0-9A-Za-z]{6-16}}$/.test(123456)

七题   _proto ===prototype
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
console.log(c1.prototype === c1.__proto__.prototype) 
console.log(c1.__proto__ === C.prototype)
console.log(c1.__proto__.prototype === c1.prototype)
console.log(c1.__proto__.__proto__ === B.prototype)
console.log(c1.__proto__.__proto__.__proto__ === A.prototype)
console.log(c1.__proto__.constructor === C.prototype.constructor)
console.log(c1.__proto__.constructor.prototype === C.prototype)
console.log(c1.__proto__.constructor.prototype.constructor === C.prototype.constructor)
console.log(C.prototype.constructor === c1.__proto__.constructor.prototype.constructor)
console.log(C.prototype.constructor.prototype === c1.__proto__.constructor.prototype)
console.log(C.prototype.constructor.prototype.constructor ===c1.__proto__.constructor.prototype.constructor)
console.log(C.prototype.__proto__ === B.prototype)



