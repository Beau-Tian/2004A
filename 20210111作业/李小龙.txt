1.写出自己理解的原型和原型链
   /*
        原型中有 constructor  指向函数的本身
        原型中的属性 prototype
        原型中实例化后的属性 __proto__  ==== 原形的属性  prototype
        */
        //  属性
        function as(){
          this.name = "点我"
          this.age= 18
        }
        as.prototype

        var Sl = new  as()
        console.log(Sl)
        // 判断一些属性
    console.log( as.prototype === Sl.__proto__)      //  true
    console.log(as.prototype.constructor === as)      //  true
    console.log(as.prototype.constructor.prototype === as.prototype)    //  true
2.function y(num) {
    console.log(num);  
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
请写出最终答案。num :2,1 
fn 2 1 1

3.function y() {
    console.log(num);
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
请写出最终答案。  5 1 1

4.function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();  1 1

5.for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
//写出三种能正常打印0-9的方法
  1for (let i = 0; i < 10; i++) {
            setTimeout(() => { console.log(i); }, 100);
         }
 2for
 for (var i=0;i<10;i++){
                console.log(i)
            }
3
 var i = 0;
                        function add() {
                            i++
                            for (let i = 0; i < 10; i++) {
                                setTimeout(() => { console.log(i); }, 100);
                            }
                        }
                        function aa() {
                            add()
                        }
                        aa()

6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
/^[\da-zA-z]{6,15}$/.test（）
7.//注意审题
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
c1.prototype === C.__proto__.prototype?
c1.__proto__ === C.prototype ?
c1.__proto__.prototype ===   c1.prototype?
c1.__proto__.__proto__ === B.prototype ?
c1.__proto__.__proto__.__proto__ ===  A.prototype ?
c1.__proto__.constructor === C.prototype?
c1.__proto__.constructor.prototype === C.prototype?
c1.__proto__.constructor.prototype.constructor ===C ?
C.prototype.constructor === C?
C.prototype.constructor.prototype === c1.__proto__ ?
C.prototype.constructor.prototype.constructor ===  C?
C.prototype.__proto__ === B.prototype ?