1.写出自己理解的原型和原型链
原型：js里的对象都有一个prototype属性指向了原型对象，二对象的实例化后获得的_proto_属性也是只想原型对象。因为_proto_属性和prototype都是指向原型对象，所以实例化后可以共享原型对象里的方法和属性
原型链：如果上级的仓库里面没有想要的东西，就去上级的上级找，如果还没有就继续往上找，直到找到为止，也就是object的原型
2.function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
请写出最终答案。
2,1，2,1,1


3.function y() {
    console.log(num);
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
请写出最终答案。
f num(){console.log(5)};
1
1
4.function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();
1
1
5.for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
10遍10
//写出三种能正常打印0-9的方法
(1)
for(var i=0;i<=9;i++){
console.log(i);
}
(2)

6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
 /^[a-zA-Z0-9_]{6,15}$/;
7.//注意审题
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
<<<<<<< HEAD
c1.prototype ===  undefined
c1.__proto__ ===C.prototype 
c1.__proto__.prototype === undefined
c1.__proto__.__proto__ === B.prototype
c1.__proto__.__proto__.__proto__ === A.prototype
c1.__proto__.constructor ===C
=======
c1.prototype ===  C.__proto__.prototype
c1.__proto__ ===C.prototype 
c1.__proto__.prototype ===  B.__proto__.prototype
c1.__proto__.__proto__ === B.prototype
c1.__proto__.__proto__.__proto__ === A.prototype
c1.__proto__.constructor ===C.prototype.constructor 
>>>>>>> 0c6a7576c87adc23860cf11e46c6a39cba6dcb8a
c1.__proto__.constructor.prototype === C.prototype
c1.__proto__.constructor.prototype.constructor ===C 
C.prototype.constructor === C
C.prototype.constructor.prototype === C.prototype
C.prototype.constructor.prototype.constructor === C
C.prototype.__proto__ === B.prototype