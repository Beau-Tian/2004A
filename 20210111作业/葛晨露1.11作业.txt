1.写出自己理解的原型和原型链
每个函数都有一个prototype属性，这个属性就是原型
原型链： 每个实例化对象都有一个proto属性，这个属性指向函数的原型，
当我们访问对象中的属性的时候，先从当前对象找，如果找不到的话，从当前原型中查找，=》 当前函数的继承对象中查找，最后如果没有找到返回 undefined
每个实例化的对象的的proto属性指向函数的原型属性prototype
函数的prototype中包含constructor属性，
constructor属性指向函数本身


2.function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
请写出最终答案。
2,1,undefined,1,2


3.function y() {
    console.log(num);
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
请写出最终答案。
null,1,3,5


4.function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();
1,3


5.for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
0,1,2,3,4,5,6,7,8,9
//写出三种能正常打印0-9的方法
for(var i =0;i<10;i++)
{
    console.log(i); 
}

var num = 0;
while (num < 10)
{
	console.log(num);
	num++;
				
}
var num = 0;
do {
	console.log(num);
	num++;
	} while (num < 10);


6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
var reg =/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$/
var re = new RegExp(reg)
if (re.test(pwd)) { 
return true;
}else{ 
return false; 
}


7.//注意审题
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
c1.prototype === undefined;
c1.__proto__ === C.prototype;
c1.__proto__.prototype === c1.prototype;
c1.__proto__.__proto__ === B.prototype;
c1.__proto__.__proto__.__proto__ === A.prototype;
c1.__proto__.constructor === C.prototype;
c1.__proto__.constructor.prototype === C.prototype;
c1.__proto__.constructor.prototype.constructor === C;
C.prototype.constructor === C;
C.prototype.constructor.prototype === c1.__proto__;
C.prototype.constructor.prototype.constructor === C;
C.prototype.__proto__ === B.prototype;