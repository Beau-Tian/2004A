1.写出自己理解的原型和原型链


<<<<<<< HEAD
=======
原型：js里的对象都有一个prototype属性指向了原型对象，二对象的实例化后获得的_proto_属性也是只想原型对象。因为_proto_属性和prototype都是指向原型对象，所以实例化后可以共享原型对象里的方法和属性
原型链：如果上级的仓库里面没有想要的东西，就去上级的上级找，如果还没有就继续往上找，直到找到为止，也就是object的原型

######   javascript原型与原型链

1. 每个构造函数都有一个prototype属性，被称为显示原型
2. 每个实例对象都会有`_ _proto_ _`属性,其被称为隐式原型，
3. 每一个实例对象的隐式原型`_ _proto_ _`属性指向自身构造函数的显式原型prototype
4. 每个prototype原型都有一个constructor属性，指向它关联的构造函数
5. 原型链：获取对象属性时，如果对象本身没有这个属性，那就会去他的原型`__proto__`上去找，
如果还查不到，就去找原型的原型，
一直找到最顶层(`Object.prototype`)为止。
Object.prototype对象也有__proto__属性值为null。
>>>>>>> 1b9373974923e32d704bee414b49be7d7caceaa7

2.function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
=======
原型：每个函数对象都有属性和方法，每个对象都有一个原型对象，指向函数的原型原型。
原型链：函数被实例化之后，都有一个__proto__属性。指向函数的原型。相当于汽车模型定好之后的量产，不能修改属性。
要想寻找某个属性，先从当前对象中查找，如果找到可以从他的原型上面去查找。如果还找不到，可以从原型的原型上去查找，直到找到最顶级的原型。如果还找不到，则返回undefined。
这种一级一级向上查找，形成的链条关系，称为原型链
2.函数y（num）{
    console.log(num); 2
    var num = 1;
    console.log(num);1
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
请写出最终答案。

<<<<<<< HEAD

=======
2,1
f fn(){console.log(2)};
f (){console.log(1)};
f (){console.log(1)}

//答案:2,1
>>>>>>> 1b9373974923e32d704bee414b49be7d7caceaa7

3.function y() {
    console.log(num);
    var num = 1;
    console.log(num);

2

3.function y() {
    console.log(num);1
    var num = 1;
    console.log(num);1
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
请写出最终答案。

<<<<<<< HEAD

=======
f num(){console.log(5)};
1
1

 // 1,1
>>>>>>> 1b9373974923e32d704bee414b49be7d7caceaa7

4.function y() {    
    var num = 1; 
    console.log(num);


5
4.function y() {    
    var num = 1;
    console.log(num);1
    function num() { console.log(3); }
    console.log(num);
}
y();
=======
1
1
=======
//1,1

<<<<<<< HEAD

=======
3
>>>>>>> 1b9373974923e32d704bee414b49be7d7caceaa7
5.for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
//写出三种能正常打印0-9的方法
=======
10遍10
//写出三种能正常打印0-9的方法
(1)
for(var i=0;i<=9;i++){
console.log(i);
}
(2)



6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
^(?![0-9]+$)(?![a-zA-Z]+$)_[0-9A-Za-z]{6,15}$
=======
for...in(key) for...of()
6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
/^[\w-\.]{6,16}$/



7.//注意审题
function A() {}
<<<<<<< HEAD
function B() {}            
B.prototype = Object.create(A.prototype);
=======
function B() {}
B.prototype = Object.create(A.prototype); //__proto__
>>>>>>> 1b9373974923e32d704bee414b49be7d7caceaa7
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype); //__proto__: Object
C.prototype.constructor = C;

var c1 = new C();
<<<<<<< HEAD
console.log(c1)
        console.log(c1.prototype ===) 
        console.log(c1.__proto__ === )
        console.log(c1.__proto__.prototype === )
        console.log(c1.__proto__.__proto__ === )
        console.log(c1.__proto__.__proto__.__proto__ === )
        console.log(c1.__proto__.constructor ===)
        console.log(c1.__proto__.constructor.prototype === )
        console.log(c1.__proto__.constructor.prototype.constructor ===）
        console.log(C.prototype.constructor === )
        console.log(C.prototype.constructor.prototype ===）
        console.log(C.prototype.constructor.prototype.constructor ===)
        console.log(C.prototype.__proto__ ===)
=======
c1.prototype === C.prototype?
c1.__proto__ ===C.prototype 
c1.__proto__.prototype === A.prtotype
c1.__proto__.__proto__ === B.prototype
c1.__proto__.__proto__.__proto__ === A.prototype
c1.__proto__.constructor ===C.prototype.constructor 
c1.__proto__.constructor.prototype === C.prototype
c1.__proto__.constructor.prototype.constructor ===C 
C.prototype.constructor === C
C.prototype.constructor.prototype === C.prototype
C.prototype.constructor.prototype.constructor === C
C.prototype.__proto__ === B.prototype
=======
c1.prototype === ?
c1.__proto__ === ?
c1.__proto__.prototype === ?
c1.__proto__.__proto__ === ?
c1.__proto__.__proto__.__proto__ === ?
c1.__proto__.constructor === ?
c1.__proto__.constructor.prototype === ?
c1.__proto__.constructor.prototype.constructor === ?
C.prototype.constructor === ?
C.prototype.constructor.prototype === ?
C.prototype.constructor.prototype.constructor === ?
C.prototype.__proto__ === ?

答案：
       //console.log(c1)
        console.log(c1.prototype === undefined) 
        console.log(c1.__proto__ === C.prototype)
        console.log(c1.__proto__.prototype === undefined)
        console.log(c1.__proto__.__proto__ === B.prototype)
        console.log(c1.__proto__.__proto__.__proto__ === A.prototype)
        console.log(c1.__proto__.constructor === C.prototype.constructor)
        console.log(c1.__proto__.constructor.prototype === C.prototype)
        console.log(c1.__proto__.constructor.prototype.constructor === C.prototype.constructor)
        console.log(C.prototype.constructor === c1.__proto__.constructor.prototype.constructor)
        console.log(C.prototype.constructor.prototype === c1.__proto__.constructor.prototype)
        console.log(C.prototype.constructor.prototype.constructor ===c1.__proto__.constructor.prototype.constructor)
        console.log(C.prototype.__proto__ === B.prototype)

第一种：
将 var 改成 let 。
第二种：
<script>
        setTimeout(() => {
            for(var i =0;i<10;i++){
                console.log(i);
            }
        },100);
 </script>
 
 第三种：
 <script>
       for(var i=0;i<10;i++){
           console.log(i);
       }
    </script>
+6.密码必须为6-15位的数字，字母，_-的组合。请使用正则表达式验证。：
/[0-9a-zA-Z _] {6，15}/
7.//注意审题
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
c1.prototype ===？C.prototype
c1 .__ proto__ ===？C.prototype
c1 .__ proto __。prototype ===？ B.prototype
c1 .__ proto __.__ proto__ ===吗？B.prototype
c1.__proto__.__proto__.__proto__ === ?A.prototype
c1.__proto__.constructor === ?c
c1.__proto__.constructor.prototype === ?B.prototype
c1.__proto__.constructor.prototype.constructor === ?B
C.prototype.constructor === ?B
C.prototype.constructor.prototype === ?A.prototype
C.prototype.constructor.prototype.constructor === ?A
C.prototype.__proto__ === ? A.prototype
>>>>>>> 1b9373974923e32d704bee414b49be7d7caceaa7
