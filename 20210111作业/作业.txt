1.写出自己理解的原型和原型链
答：
①、prototype：每个构造函数都有一个prototype属性，被称为显示原型；
②、__proto__：每个实例对象都会有__proto__属性，被称为隐式原型。
每一个实例对象的隐式原型__proto__属性都指向自身构造函数的显示原型prototype；
③、constructor：每个prototype原型都有一个constructor属性，指向关联的构造函数。
④、原型链：获取对象属性时，如果对象本身没有这个属性，那就去原型__proto__上去找，还找不到就去原型的原型，一直找到最顶层object.prototype为止。而object.prototype对象的__proto__为null。
2.function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
请写出最终答案。
答：
num=2
num=1
fn==>console.log(2)
fn==>console.log(1)
fn==>console.log(1)
3.function y() {
    console.log(num);
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
请写出最终答案。
答：
num=console.log(5)
num=1
num=1

4.function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();
答：
num=1
num=1

5.for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
//写出三种能正常打印0-9的方法
答：
1、for(var i=0;i<10;i++){
　　((j)=>{
　　　　setTimeout(function(){
　　　　　　console.log(j)
　　　　},1000)
})(i)
}
2、for(let i=0;i<=10;i++){ setTimeout(function() {  console.log(i)  }, 10);}
6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
答：
var str = "/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,15}$/"

7.//注意审题
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
c1.prototype === ?
c1.__proto__ === ?
c1.__proto__.prototype === ?
c1.__proto__.__proto__ === ?
c1.__proto__.__proto__.__proto__ === ?
c1.__proto__.constructor ===* ?
c1.__proto__.constructor.prototype === ?
c1.__proto__.constructor.prototype.constructor === ?
C.prototype.constructor === ?
C.prototype.constructor.prototype === ?
C.prototype.constructor.prototype.constructor === ?
C.prototype.__proto__ === ?
答：
c1.prototype === C.__proto__.prototype;
c1.__proto__ === C.prototype;
c1.__proto__.prototype === C.__proto__.prototype;
c1.__proto__.__proto__ === C.prototype.__proto__;
c1.__proto__.__proto__.__proto__ === C.prototype.__proto__.__proto__;
c1.__proto__.constructor === C.prototype;
c1.__proto__.constructor.prototype === C.prototype;
c1.__proto__.constructor.prototype.constructor ===C ;
C.prototype.constructor === C;
C.prototype.constructor.prototype === c1.__proto__ ;
C.prototype.constructor.prototype.constructor ===  C;
C.prototype.__proto__ === B.prototype;