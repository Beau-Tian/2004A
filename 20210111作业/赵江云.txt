1.原型：每个函数都有一个prototype(也是一个对象)属性，这个属性就是函数的原型，就相当于公共的    

2.--proto--  

每个对象都有一个--protot--属性，这个属性被称为隐式原型 

每个对象隐式原型的--proto--指向自身构造函数的显示原型

对象都会有一个__proto__指向了构造函数里面的东西

__proto__对象原型和原型对象的prototype是相等的

例：<script>

​    *function* Star(*name*, *age*) {

​      this.name = *name*;

​      this.age = *age*;

​    }

​    // 构造函数的原型对象

​    Star.prototype.song = *function* () {

​      console.log("唱歌");

​    }

​    *var* test = new Star("xx", 20)

​    console.log(test.__proto__ === Star.prototype)//返回结果true

  </script>

3.constructor   

每个prototype原型的constructor指向构造函数

4.原型链

当我们查找一个属性或者方法的时候，先在当前函数中查找，如果没有找到继续在当前函数的原型中

查找，如果还没有找到，则继续向上一级查找，最后如果还没有找到返回undefined，这种链条关系就

是原型链。


function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
答案
2 1  fnlog(2)  fnlog(1) fnlog(1)

3.function y() {
    console.log(num);
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
答案
function num() { console.log(5); }  1   1

4.function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();

5.for(var i = 0;i<10;i++){ 
	setTimeout( console.log(i),100);
 }

for(let i=0;i<10;i++){
   setTimeout(()=>{ console.log(i); },100);
}


for(var i=0;i<10;i++){  
    setTimeout(()=>{  
        console.log(i);
    },100);  
}  

6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
/^\w{6,15}$/  ^[a-zA-Z]\w{5,14}$


7.
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
c1.prototype === C.__proto__.prototype
c1.__proto__ === C.prototype
c1.__proto__.prototype === undefined
c1.__proto__.__proto__ === B.prototype
c1.__proto__.__proto__.__proto__ === A.prototype
c1.__proto__.constructor === C
c1.__proto__.constructor.prototype === C.prototype
c1.__proto__.constructor.prototype.constructor === C
C.prototype.constructor === C
C.prototype.constructor.prototype === C.prototype
C.prototype.constructor.prototype.constructor === C
C.prototype.__proto__ === B.prototype
