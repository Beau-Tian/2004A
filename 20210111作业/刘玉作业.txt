1.写出自己理解的原型和原型链
     每个函数都有一个prototype属性，被称为显示原型  
     每个实例对象都会有`_ _proto_ _`属性,其被称为隐式原型
     每一个实例对象的隐式原型`_ _proto_ _`属性指向自身构造函数的显式原型prototype
     每个prototype原型都有一个constructor属性，指向它关联的构造函数。 
     原型链：获取对象属性时，如果对象本身没有这个属性，那就会去他的原型`__proto__`上去找，如果还查不到，就去
	找原型的原型，一直找到最顶层(`Object.prototype`)为止。
	Object.prototype对象也有__proto__属性值为null。
-
2.function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
2  1  
 ƒ fn() {
            console.log(2);
        }
 ƒ () {
            console.log(1);
        }
 ƒ () {
            console.log(1);
        }

3.function y() {
    console.log(num);	under
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
请写出最终答案。
	function num() { console.log(5); }
	1     1


4.function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();
1  
5.for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
//写出三种能正常打印0-9的方法
1.let  
2.for (var i = 0; i < 10; i++) {
      ((j) => {
        setTimeout(function () {
          console.log(j); //1-10
        }, 1000);
      })(i);
    }

6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。
^(?!^[\d]+$)(?!^[-]+$)(?!^[_]+$)(?!^[a-zA-Z]+$)[\w-]{6,15}$
7.//注意审题
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

var c1 = new C();
c1.prototype === C()
c1.__proto__ === C.prototype
c1.__proto__.prototype === C.prototype
c1.__proto__.__proto__ === B
c1.__proto__.__proto__.__proto__ === A.prototype
c1.__proto__.constructor === C
c1.__proto__.constructor.prototype === C.prototype
c1.__proto__.constructor.prototype.constructor === C
C.prototype.constructor === C
C.prototype.constructor.prototype === C.prototype
C.prototype.constructor.prototype.constructor === C
C.prototype.__proto__ === c1.constructor