1.写出自己理解的原型和原型链
  原型：一个可以被复制的一个类，通过复制原型可以创建一个一模一样的新对象
也可以说原型就是一个模板，在设计语言中更准确的说是一个对象模板
原型链：当访问一个对象的某个属性时会先在这个对象本身属性上查找，如果
没有找到，则会去它的__proto__原型上查找，即它的构造函数的prototype
如果还没有找到就会再在构造函数的prototype的__proto__中查找
这样一层一层向上查找就会形成一个链式结构
（就是一直往上层查找，如果找到了就使用，如果找不到就一直往上查找，直到
null还没有找到，就返回undefined）
2.function y(num) {
    console.log(num);
    var num = 1;
    console.log(num);
    console.log(fn);
    var fn = function() {
       console.log(1);
   }
   console.log(fn);
   function fn(){
       console.log(2);
   }
   console.log(fn);
}
y(2);
请写出最终答案。
打印出来的分别是2,1,2,1,1
3.function y() {
    console.log(num);
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    function num() { console.log(5); }
    console.log(num);
}
y();
请写出最终答案。
打印出来的分别是5,1,1
4.function y() {    
    var num = 1;
    console.log(num);
    function num() { console.log(3); }
    console.log(num);
}
y();
打印出来的分别是1,1
5.for(var i = 0;i<10;i++){ 
	setTimeout(()=>{ console.log(i); },100);
 }
//写出三种能正常打印0-9的方法

第一种：
for(var i=0;i<10;i++){
　　((j)=>{
<<<<<<< HEAD
　　　　setTimeout(function(){
=======
      //指向箭头函数
　　　　setTimeout(function(){
              //计时器
>>>>>>> 0c6a7576c87adc23860cf11e46c6a39cba6dcb8a
　　　　　　console.log(j)
　　　　},1000)
})(i)
}

第二种：
for(let i=0;i<=9;i++){ setTimeout(function() {  console.log(i)  }, 10);}

第三种：
for(let i=0;i<=9;i++){
    setTimeout(()=>{ console.log(i); 
},100);}

6.密码必须为6-15位的数字、字母、_-的组合。请使用正则表达式验证。

(正则真的忘记了，这个是百度的)
 var a =/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$/

7.//注意审题
function A() {}
function B() {}
B.prototype = Object.create(A.prototype);
B.prototype.constructor = B;
function C() {}
C.prototype = Object.create(B.prototype);
C.prototype.constructor = C;

 var c1 = new C();
        console.log(c1.prototype === c1.__proto__.prototype) 
        console.log(c1.__proto__ === C.prototype)
        console.log(c1.__proto__.prototype === c1.prototype)
        console.log(c1.__proto__.__proto__ === B.prototype)
        console.log(c1.__proto__.__proto__.__proto__ === A.prototype)
        console.log(c1.__proto__.constructor === C.prototype.constructor)
        console.log(c1.__proto__.constructor.prototype === C.prototype)
        console.log(c1.__proto__.constructor.prototype.constructor === C.prototype.constructor)
        console.log(C.prototype.constructor === c1.__proto__.constructor.prototype.constructor)
        console.log(C.prototype.constructor.prototype === c1.__proto__.constructor.prototype)
        console.log(C.prototype.constructor.prototype.constructor ===c1.__proto__.constructor.prototype.constructor)
        console.log(C.prototype.__proto__ === B.prototype)