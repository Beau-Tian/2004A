 1.写出自己理解的原型和原型链
        每个函数都有一个prototype属性，这个属性就是原型

        原型链： 每个实例化对象都有一个__proto__属性，这个属性指向函数的原型，

        当我们访问对象中的属性的时候，先从当前对象找，如果找不到的话，从当前原型中查找， 当前函数的继承对象中查找，最后如果没有找到返回 undefined
        2.function y(num) {
            console.log(num);
            var num = 1;
            console.log(num);
            console.log(fn);
            var fn = function () {
                console.log(1);
            }
            console.log(fn);
            function fn() {
                console.log(2);
            }
            console.log(fn);
        }
        y(2);
        请写出最终答案。2,1,log(2),log(1),log(1)

        3.function y() {
            console.log(num);
            var num = 1;
            console.log(num);
            function num() { console.log(3); }
            function num() { console.log(5); }
            console.log(num);
        }
        y();
        请写出最终答案。log(5),1,1

        4.function y() {
            var num = 1;
            console.log(num);
            function num() { console.log(3); }
            console.log(num);
        }
        y();
        请写出最终答案。1,1

        5.for (var i = 0; i < 10; i++) {
            setTimeout(() => { console.log(i); }, 100);
        }
        //写出三种能正常打印0-9的方法
        第一种：
        for (var i = 0; i < 10; i++) {
            try {
                throw i;
            } catch (e) {
                setTimeout(() => { console.log(e); }, 100);
            }
        }
        第二种：
        for (let i = 0; i < 10; i++) {
            setTimeout(() => { console.log(i); }, 100);
        }

        6.密码必须为6 - 15位的数字、字母、_ - 的组合。请使用正则表达式验证。
        / ^ (? !^ [\d] + $)(?!^ [-] + $)(?!^ [_] + $)(?!^ [a - zA - Z] + $)[\w -]{ 6, 15 } $/
        7.//注意审题
        function A() { }
        function B() { }
        B.prototype = Object.create(A.prototype);
        B.prototype.constructor = B;
        function C() { }
        C.prototype = Object.create(B.prototype);
        C.prototype.constructor = C;

        var c1 = new C();
        c1.prototype === C.__proto__.prototype
        c1.__proto__ === C.prototype
        c1.__proto__.prototype === C.__proto__.prototype
        c1.__proto__.__proto__ === B.prototype
        c1.__proto__.__proto__.__proto__ === A.prototype
        c1.__proto__.constructor === C
        c1.__proto__.constructor.prototype === C.prototype
        c1.__proto__.constructor.prototype.constructor === C
        C.prototype.constructor === C
        C.prototype.constructor.prototype === C.prototype
        C.prototype.constructor.prototype.constructor === C
        C.prototype.__proto__ === B.prototype