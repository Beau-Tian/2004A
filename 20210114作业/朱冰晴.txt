1.用解构赋值的方式将 PageIndex,PageSize,id,category,subject,format,changed解构出来
{
  "paramz": {
    "feeds": 
      [{
        "id": 299076,
        "category": "article",
        "data": {
          "subject": "荔枝新闻3.0：不止是阅读",
          "format": "txt",
          "changed": "2015-09-22 16:01:41"
        }
      }],
    "PageIndex": 1,
    "PageSize": 20
  }
}



const {
    paramz: {
        PageIndex: ind,
        PageSize: siz,
        feeds: [
            {
                id: ids,
                category: gory,
                data: {
                    subject: ject,
                    format: mat,
                    changed: nged
                }
            }
        ]
    }
} = {
    "paramz": {
        "feeds":
            [{
                "id": 299076,
                "category": "article",
                "data": {
                    "subject": "荔枝新闻3.0：不止是阅读",
                    "format": "txt",
                    "changed": "2015-09-22 16:01:41"
                }
            }],
        "PageIndex": 1,
        "PageSize": 20
    }
}
console.log(ind, siz, ids, gory, ject, mat, nged)

2.
//获取用户
function getUser(id) {
    return Promise.resolve(id + 1);
}

//根据用户获取角色
function getRoleByUser(id) {
    return Promise.resolve(id + 1);
}

//根据角色获取权限
function getRightsByRole(id) {
    return Promise.resolve(id + 1);
}

function ab() {
    //先获取用户
    getUser(1).then(c => {
        //根据用户ID获取角色
        getRoleByUser(c).then(d => {
            //根据角色ID获取权限
            getRightsByRole(d).then(c => {
            });
        });
    });
}
//改为同步的方式执行
async function ab() {
    //先获取用户
    getUser(1).then(c => {
        //根据用户ID获取角色
        getRoleByUser(c).then(d => {
            //根据角色ID获取权限
            getRightsByRole(d).then(c => {
            });
        });
    });

    var c = await getUser(1);
    var d = await getRoleByUser(c)
    var a = await getRightsByRole(d);

    console.log(c, d, a)
}
ab()
3.
function Number(length) {
    this.length = length;
}

Numbe.prototype.push = function(arr) {

}

Numbe.prototype.pop = function() {

}

Numbe.isNumber = function(arr) {

}

//转换为class的方式
class Numbe{
	constructor(length) {
    this.length = length;
},
push(arr){}
pop(){}
static isNumbe(arr){}
}
```

5.阅读本篇文章https://segmentfault.com/a/1190000007535316，写出看懂和没看懂的地方。
明白：async/await解决promise的then链
问题：promise.resolve（）？？？
6.阅读本篇文章https://github.com/mqyqingfeng/Blog/issues/3	 写出看懂和没看懂的地方。
明白：JavaScript采用的是静态作用域，函数的作用域在函数定义的时候就决定了。
问题：执行上下文栈？？？
7.阅读本篇文章https://learnku.com/articles/50523，写出看懂和没看懂的地方。
静态作用域又叫做词法作用域，采用词法作用域的变量叫词法变量。词法变量有一个在编译时静态确定的作用域。词法变量的作用域可以是一个函数或一段代码，该变量在这段代码区域内可见（visibility）；在这段区域以外该变量不可见（或无法访问）。词法作用域里，取变量的值时，会检查函数定义时的文本环境，捕捉函数定义时对该变量的绑定。
----------
箭头函数的理解是：箭头函数的this，始终指向父级的上下文；而普通函数的this谁调用就指向谁
箭头函数没有原型属性，箭头函数是匿名函数，不能作为构造函数，不能使用new