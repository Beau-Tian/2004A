原始值和引用值
ECMAScript变量可以包含两种不同类型的数据：原始值和引用值。原始值（primitive value）就是最简单的数据，引用值（referencevalue）则是由多个值构成的对象。了6种原始值： Undefined 、 Null 、 Boolean 、 Number 、 String 和 Symbol 。

动态属性
对于引用值而言，可以随时添加、修改和删除其属性和方法。
let person = new Object(); person.name = "Nicholas"; console.log(person.name);
这里，首先创建了一个对象，并把它保存在变量 person 中
给这个对象添加了一个名为 name 的属性
并给这个属性赋值了一个字符串 "Nicholas" 。

传递参数
在按值传递参数时，值会被复制到一个局部变量
（即一个命名参数，或者用ECMAScript的话说，就是 arguments 对象中的一个槽位）

确定类型
typeof 虽然对原始值很有用，但它对引用值的用处不大
ECMAScript提供了 instanceof 操作符
如果变量是给定引用类型的实例，则 instanceof 操作符返回 true 。

变量声明

使用 var 的函数作用域声明
function add(num1, num2) { 
    var sum = num1 + num2; 
    return sum;
 }

 使用 let 的块级作用域声明
if (true) { let a;
}console.log(a); 
while (true) { let b; }console.log(b);
function foo() { let c; }console.log(c); 
{ let d; }console.log(d);

使用 const 的常量声明
const a; 
const b = 3;
console.log(b); // 3 b = 4;

标记清理
JavaScript最常用的垃圾回收策略是标记清理
给变量加标记的方式有很多种  比如，当变量进入上下文时，反转某一位
垃圾回收程序运行的时候，会标记内存中存储的所有变量
被加上标记的变量就是待删除的

JavaScript变量可以保存两种类型的值：原始值和引用值。原始值
可能是以下6种原始数据类型之一： Undefined 、 Null 、
