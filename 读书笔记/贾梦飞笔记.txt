一。JavaScript是一门用来与网页交互的脚本语言，包含以下三个组成
部分。
包含：ECMAScript
DOM
BOM
二。JavaScript插入HTML的主要方法是使用 <script> 元素
推迟执行脚本：defer
异步执行脚本：async和defer类似，defer
不同的是，标记为 async 的脚本并不保证能按照它们出现的次序执
行
文档模式：最初的文档模式有两种：混杂模式和标准模式
JavaScrip重点：
1.要包含外部JavaScript文件，必须将 src 属性设置为要包含文件
的URL。文件可以跟网页在同一台服务器上，也可以位于完全不
同的域。
2.所有 <script> 元素会依照它们在网页中出现的次序被解释。
在不使用 defer 和 async 属性的情况下，包含在 <script>
元素中的代码必须严格按次序解释。
3.对不推迟执行的脚本，浏览器必须解释完位于 <script> 元素
中的代码，然后才能继续渲染页面的剩余部分。为此，通常应该
把 <script> 元素放到页面末尾，介于主内容之后及
</body> 标签之前。
4.可以使用 defer 属性把脚本推迟到文档渲染完毕后再执行。推
迟的脚本总是按照它们被列出的次序执行。
5.可以使用 async 属性表示脚本不需要等待其他脚本，同时也不
阻塞文档渲染，即异步加载。异步脚本不能保证按照它们在页面
中出现的次序执行。
6.通过使用 <noscript> 元素，可以指定在浏览器不支持脚本时
显示的内容。如果浏览器支持并启用脚本，则 <noscript> 元
素中的任何内容都不会被渲染。
三。语言基础：
1.语法：
   ①.区分大小写：字母一定要区分大小写
   ②.标识符:就是变量、函数、属性或函数参数的名称。标识符
可以由一或多个下列字符组成
   ③.注释：单行注释：//，多行注释：/**/
   ④.严格模式：严格模式是一种不同的JavaScript解析和执行模型，
2.关键字和保留字
   在JavaScript不能使用关键字和保留字会引起一些冲突或BUG
3.变量：
   var，
   let，
   const
4.数据类型：typeof检测数据类型
   简单数据类型：Undefined：表示值未定义、 Null ：空、 Boolean： 表示值为布尔值 、 Number：表示值为数值 、 String：表示值为字符串， Symbol ：表示值为符号。 
   复杂数据类型：Object 表示值为对象（而不是函数）
5.操作符：描述了一组可用于操作数据值的操作符
   +加  -减  ++递加  --递减   *乘  /除  %取模       ！取反
   包括小于（ < ）、大于（ > ）、小于等于（ <= ）和大于等于（ >= ），
  ==相等    ！=不等   ===全等  ！==不全等    =赋值
6.语句
    ①。if语句用于判断，分支少的时候比较好用
    ②。do-while 语句，while 语句，for 语句：循环语句
    ③。for-in 语句，for-of 语句：循环对象
    ④。switch 语句与if一样是判断的语句，分支多的时候比较好用
7.函数：function
     函数对任何语言来说都是核心组件，因为它们可以封装语句，然
后在任何地方、任何时间执行。
四。变量、作用域与内存
  1.原始值与引用值
原始值（primitive value）就是最简单的数据，引用值（referencevalue）则是由多个值构成的对象。
动态属性：
原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值，不同的是引用值可以随时添加、修改和删除其属
性和方法。而原始值不能有属性，尽管尝试给原始值添加属性不会报错。
传递参数：所有函数的参数都是按值传递的，程序运行过程中，实际参数就会将参数值传递给相应的形式参数，然后在函数中实现对数据处理和返回的过程，方法有按值传递参数，按地址传递参数和按数组传递参数。
执行上下文与作用域：执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。
执行上下文的生命周期包括三个阶段：创建阶段→执行阶段→回收阶段
每个上下文都有一个关联的变量对象而这个上下文中定义的所有变量和函数都存在于这个对象上。虽然无法通过代码访问变量对象，但后台处理数据会用到它。
上下文中的代码在执行的时候，会创建变量对象的一个作用域链
作用域链增强：有其他方式来增强作用域链。某些语句会导致在作用域链前端临时添加一个上下文，这个上下文在代码执行后会被删除。通常在两种情况下会出现这个现象，即代码执行到
try / catch 语句的 catch 块 with 语句这两种情况下，都会在作用域链前端添加一个变量对象。对with 语句来说，会向作用域链前端添加指定的对象；对 catch 语
句而言，则会创建一个新的变量对象，这个变量对象会包含要抛出的错误对象的声明
变量声明：使用 var 的函数作用域声明变量会被自动添加到最接近的上下文，var 声明会被拿到函数或全局作用域的顶部，
使用 let 的块级作用域声明：特点有无法变量提升，存在let不能重复定义，只在块级作用域内生效，块级作用域内只能够拿到该作用域内声明的let变量，外部被忽略
使用 const 的常量声明：一经声明，在其生命周期的任何时候都不能再重新赋予新值，除了要遵循以上规则，其他方面与 let 声明是一样的
垃圾回收：
标记清除：这是javascript中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。
引用计数：另一种不太常见的垃圾回收策略是引用计数。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存。
内存泄漏：内存泄漏指申请的内存一直得不到释放，GC回收不了。一般在项目中就是，你创建的对象一直保存在内存中，可达但你把它的引用地址搞丢了结果没法操作它，而GC又不会回收这块内存。内存泄漏的危害就是堆积耗尽系统所有内存。







