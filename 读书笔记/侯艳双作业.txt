Script中的基本数据类型包括 Undefined 、 Null 、 Boolean 、 Number 、 String 和 Symbol 。与其他语言不同，ECMAScript不区分整数和浮点值，只有Number 一种数值数据类型。Object 是一种复杂数据类型，它是这门语言中所有对象的基类。


Script提供了C语言和类C语言中常见的很多基本操作符，包括数学操作符、布尔操作符、关系操作符、相等操作符和赋值操作符等。


这门语言中的流控制语句大多是从其他语言中借鉴而来的，比如if 语句、 for 语句和 switch 语句等。ECMAScript中的函数与其他语言中的函数不一样。不需要指定函数的返回值，因为任何函数可以在任何时候返回任何值。不指定返回值的函数实际上会返回特殊值 undefined



三。语言基础：
1.语法：
   ①.区分大小写：字母一定要区分大小写
   ②.标识符:就是变量、函数、属性或函数参数的名称。标识符
可以由一或多个下列字符组成
   ③.注释：单行注释：//，多行注释：/**/
   ④.严格模式：严格模式是一种不同的JavaScript解析和执行模型，
2.关键字和保留字
   在JavaScript不能使用关键字和保留字会引起一些冲突或BUG
3.变量：
   var，
   let，
   const
4.数据类型：typeof检测数据类型
   简单数据类型：Undefined：表示值未定义、 Null ：空、 Boolean： 表示值为布尔值 、 Number：表示值为数值 、 String：表示值为字符串， Symbol ：表示值为符号。 
   复杂数据类型：Object 表示值为对象（而不是函数）
5.操作符：描述了一组可用于操作数据值的操作符
   +加  -减  ++递加  --递减   *乘  /除  %取模       ！取反
   包括小于（ < ）、大于（ > ）、小于等于（ <= ）和大于等于（ >= ），
  ==相等    ！=不等   ===全等  ！==不全等    =赋值
6.语句
    ①。if语句用于判断，分支少的时候比较好用
    ②。do-while 语句，while 语句，for 语句：循环语句
    ③。for-in 语句，for-of 语句：循环对象
    ④。switch 语句与if一样是判断的语句，分支多的时候比较好用
7.函数：function
     函数对任何语言来说都是核心组件，因为它们可以封装语句，然
后在任何地方、任何时间执行。 




### 推迟执行脚本


HTML 4.01为 <script> 元素定义了一个叫 defer 的属性。这个属性表示脚本在执行的时候不会改变页面的结构。因此，这个脚本完全可以在整个页面解析完之后再运行在 <script> 元素上设defer 属性，会告诉浏览器应该立即开始下载，但执行应该推迟。对 defer 属性的支持是从IE4、Firefox3.5、Safari 5和Chrome 7开始的。其他所有浏览器则会忽略这个属性，按照通常的做法来处理脚本。考虑到这一点，还是把要推迟执行的脚本放在页面底部比较好


### 异步执行脚本


HTML5为 <script> 元素定义了 async 属性。从改变脚本处理方式上看， async 属性与 defer 似。当然，它们两者也都只适用于外部脚本，都会告诉浏览器立即开始下载。不过，与 defer不同是，标记为 async 的脚本并不保证能按照它们出现的次序执行。异步脚本保证会在页面的 load 事件前执行，但可能会在DOMContentLoaded之前或之后。Firefox 3.6、Safari 5和Chrome 7支持异步脚本。


### 动态加载脚本


除了 <script> 标签，还有其他方式可以加载脚本。因为JavaScript可以使用DOM API，所以通过向DOM中动态添加 script元素同样可以加载指定的脚本。只要创建一个 script 元素并将其添加到DOM即可。不是所有浏览器都支持 async 属性。因此，如果要统一动态脚本的加载行为，可以明确将其设置为同步加载：


```js
let script = document.createElement('script'); 
script.src = 'gibberish.js'; 
script.async = false; 
document.head.appendChild(script);


以这种方式获取的资源对浏览器预加载器是不可见的。这会严重
影响它们在资源获取队列中的优先级。根据应用程序的工作方式以及
怎么使用，这种方式可能会严重影响性能。要想让预加载器知道这些
动态请求文件的存在，可以在文档头部显式声明它们：
<link rel="preload" href="gibberish.js">




第 1 章 什么是JavaScript
1.1、完整的JavaScript实现包含以下几个部分：
1）核心（ECMAScript）
2）文档对象模型（DOM）
3）浏览器对象模型（BOM）
1.2、DOM
文档对象模型（DOM，Document Object Model）是一个应用编程
接口（API），用于在HTML中使用扩展的XML。
1.3、BOM
IE3和Netscape Navigator 3提供了浏览器对象模型（BOM） API，
用于支持访问和操作浏览器的窗口。
1.4、 小结
JavaScript是一门用来与网页交互的脚本语言，包含以下三个组成
部分。
ECMAScript：由ECMA-262定义并提供核心功能。
文档对象模型（DOM）：提供与网页内容交互的方法和接口。
浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。


第 2 章 HTML中的JavaScript
2.1 <script> 元素
将JavaScript插入HTML的主要方法是使用<script> 元素。
<script> 元素有下列8个属性：
async 、charset、crossorigin、defer、integrity、language、src、type


async ：可选。表示应该立即开始下载脚本，但不能阻止其他
页面动作。
charset ：可选。使用src 属性指定的代码字符集。
crossorigin ：可选。配置相关请求的CORS（跨源资源共
享）设置。默认不使用CORS。
defer ：可选。表示在文档解析和显示完成后再执行脚本是没
有问题的。只对外部脚本文件有效。
integrity ：可选。允许比对接收到的资源和指定的加密签名
以验证子资源完整性（SRI，Subresource Intergrity）。
language ：废弃。最初用于表示代码块中的脚本语言。
src ：可选。表示包含要执行的代码的外部文件。
type ：可选。代替language ，表示代码块中脚本语言的内
容类型（也称MIME类型）。
2.1.1 标签占位符
过去，所有<script> 元素都被放在页面的<head> 标签内，这种做法的主要目的是把外部的CSS和JavaScript文件都集中放到一起。对于需要很多JavaScript的页面，这会导致页面渲染的明显延迟，在此期间浏览器窗口完全空白。为解决这个问题，现代Web应用程序通常将所有JavaScript引用放在<body> 元素中的页面内容后面。
2.1.2 推迟执行脚本
HTML 4.01为<script> 元素定义了一个叫defer 的属性。这个属性表示脚本在执行的时候不会改变页面的结构。
2.1.3 异步执行脚本
HTML5为<script> 元素定义了async 属性。从改变脚本处理方式上看， async 属性与defer 类似。与defer不同的是，标记为async 的脚本并不保证能按照它们出现的次序执行。
2.1.4 动态加载脚本
因为JavaScript可以使用DOM API，所以通过向DOM中动态添加script
元素同样可以加载指定的脚本。只要创建一个script 元素并将其添加到DOM即可。
2.1.5 XHTML中的变化
可扩展超文本标记语言（XHTML，Extensible HyperText Markup
Language）是将HTML作为XML的应用重新包装的结果。与HTML不
同，在XHTML中使用JavaScript必须指定type 属性且值为text/javascript ，HTML中则可以没有这个属性。
2.2 行内代码与外部文件
可维护性、缓存、适应未来
2.3 文档模式
最初的文档模式有两种：混杂模式（quirks mode）和标准模式（standards mode）。又出现了第三种文档模式：准标准模式（almost
standards mode）。
准标准模式通过过渡性文档类型（ Transitional ）和框架集
文档类型（ Frameset ）来触发。
2.4 <noscript> 元素
早期浏览器不支持JavaScript的问题，需要一个页面优雅降级的处理方案。最终， <noscript> 元素出现，被用于给不支持JavaScript的浏览器提供替代内容。
第 3 章 语言基础
3.1.1 区分大小写无论是变
量、函数名还是操作符，都区分大小写。ECMAScript中一切都区分大小写。
3.1.2 标识符
所谓标识符，就是变量、函数、属性或函数参数的名称。标识符
可以由一或多个下列字符组成。
3.1.3 注释
// 单行注释
/* 这是多行注释 */
3.1.4 严格模式
"use strict";
3.1.5 语句
ECMAScript中的语句以分号结尾。省略分号意味着由解析器确定
语句在哪里结尾。
3.2 关键字与保留字
ECMA-262第6版规定的所有
关键字如下：
break do in typeof
case else instanceof var
catch export new void
class extends return while
const finally super with
continue for switch yield
debugger function this
default if throw
delete import try
3.3 变量
有3个关键字可以声明变量： var 、const 和let 。
其中， var 在ECMAScript的所有版本中都可以使用，而const 和let 只能在
ECMAScript 6及更晚的版本中使用。
var 关键字
要定义变量，可以使用var 操作符（注意var 是一个关键字），后跟变量名。
let 声明
let 声明的范围是块作用域
ar 声明的范围是函数作用域
1. 暂时性死区
2. 全局声明
3. 条件声明
4. for 循环中的let 声明
const 声明
const 的行为与let 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改const 声明的变量会导致运行时错误。
3.4 数据类型
ECMAScript有6种简单数据类型（也称为原始类型）：
Undefined 、Null 、Boolean 、Number 、String 和
Symbol 。Symbol （符号）是ECMAScript 6新增的。还有一种复
杂数据类型叫Object （对象）
3.4.1 typeof 操作符
用typeof 操作符会返回下列字符串之一：
"undefined" 表示值未定义；
"boolean" 表示值为布尔值；
"string" 表示值为字符串；
"number" 表示值为数值；
"object" 表示值为对象（而不是函数）或null ；
"function" 表示值为函数；
"symbol" 表示值为符号。
3.4.2 Undefined 类型
Undefined 类型只有一个值，就是特殊值undefined 。
3.4.3 Null 类型
Null 类型同样只有一个值，即特殊值null 。逻辑上讲，
null 值表示一个空对象指针，这也是给typeof 传一个null 会
返回"object" 的原因
3.4.4 Boolean 类型
Boolean （布尔值）类型是ECMAScript中使用最频繁的类型之
一，有两个字面值： true 和false 。
3.4.5 Number 类型
1. 浮点值
要定义浮点值，数值中必须包含小数点，而且小数点后面必须至
少有一个数字。
2. 值的范围
最小数值保存在Number.MIN_VALUE 是5e-324；
最大数值保存在Number.MAX_VALUE 是1.797 693 134 862 315 7e+308；
正数Infinity （正无穷大）表示
负数以-Infinity （负无穷大）表示
表示的最小值和最大值之间，可以使用isFinite() 函数
3. NaN
有一个特殊的数值叫NaN ，意思是“不是数值”（Not a
Number），用于表示本来要返回数值的操作失败了（而不是抛出
错误）
4. 数值转换
有3个函数可以将非数值转换为数值： Number() 、
parseInt() 和parseFloat() 。
3.4.6 String 类型
String （字符串）数据类型表示零或多个16位Unicode字符序
列。字符串可以使用双引号（"）、单引号（'）或反引号（`）标示。
1. 字符字面量
字符串数据类型包含一些字符字面量，用于表示非打印字符或有
其他用途的字符
2. 字符串的特点
ECMAScript中的字符串是不可变的（immutable），意思是一旦
创建，它们的值就不能变了。要修改某个变量中的字符串值，必
须先销毁原始的字符串，然后将包含新值的另一个字符串保存到
该变量。
3. 转换为字符串
有两种方式把一个值转换为字符串。
toString() 方法可见于数值、布尔值、对象和字符串值。
4. 模板字面量
ECMAScript 6新增了使用模板字面量定义字符串的能力。与使用
单引号或双引号不同，模板字面量保留换行字符，可以跨行定义
字符串。
5. 字符串插值
模板字面量最常用的一个特性是支持字符串插值，也就是可以在
一个连续定义中插入一个或多个值。字符串插值通过在${} 中使用一个JavaScript表达式实现。
6. 模板字面量标签函数
模板字面量也支持定义标签函数（tag function），而通过标签函
数可以自定义插值行为。标签函数会接收被插值记号分隔后的模
板和对每个表达式求值的结果。
7. 原始字符串
使用模板字面量也可以直接获取原始的模板字面量内容（如换行
符或Unicode字符），而不是被转换后的字符表示。为此，可以使
用默认的String.raw 标签函数。
3.4.7 Symbol 类型
Symbol （符号）是ECMAScript 6新增的数据类型。符号是原始
值，且符号实例是唯一、不可变的。
1. 符号的基本用法
符号需要使用Symbol() 函数初始化。因为符号本身是原始类
型，所以typeof 操作符对符号返回symbol 。
2. 使用全局符号注册表
如果运行时的不同部分需要共享和重用符号实例，那么可以用一
个字符串作为键，在全局符号注册表中创建并重用符号。
为此，需要使用Symbol.for() 方法。
3. 使用符号作为属性
凡是可以使用字符串或数值作为属性的地方，都可以使用符号。
这就包括了对象字面量属性和
Object.defineProperty() / Object.definedPropert
ies() 定义的属性。对象字面量只能在计算属性语法中使用符号
作为属性。
4. 常用内置符号
ECMAScript 6也引入了一批常用内置符号（well-known
symbol），用于暴露语言内部行为，开发者可以直接访问、重写
或模拟这些行为。这些内置符号都以Symbol 工厂函数字符串属
性的形式存在。
5. Symbol.asyncIterator
这个符号作为一个属性表示“一个方法，
该方法返回对象默认的AsyncIterator 。由for-awaitof
语句使用”。
6. Symbol.hasInstance





第二天



4.3.4 内存管理
在使用垃圾回收的编程环境中，开发者通常无须关心内存管理。
不过，JavaScript运行在一个内存管理与垃圾回收都很特殊的环境。分
配给浏览器的内存通常比分配给桌面软件的要少很多，分配给移动浏
览器的就更少了。这更多出于安全考虑而不是别的，就是为了避免运
行大量JavaScript的网页耗尽系统内存而导致操作系统崩溃。这个内存
限制不仅影响变量分配，也影响调用栈以及能够同时在一个线程中执
行的语句数量。


4.4 小结
JavaScript变量可以保存两种类型的值：原始值和引用值。原始值
可能是以下6种原始数据类型之一： Undefined 、Null 、
Boolean 、Number 、String 和Symbol 。原始值和引用值有
以下特点。
原始值大小固定，因此保存在栈内存上。
从一个变量到另一个变量复制原始值会创建该值的第二个副本。
引用值是对象，存储在堆内存上。
包含引用值的变量实际上只包含指向相应对象的一个指针，而不
是对象本身。
从一个变量到另一个变量复制引用值只会复制指针，因此结果是
两个变量都指向同一个对象。
typeof 操作符可以确定值的原始类型，而instanceof 操作
符用于确保值的引用类型。
任何变量（不管包含的是原始值还是引用值）都存在于某个执行
上下文中（也称为作用域）。这个上下文（作用域）决定了变量的生
命周期，以及它们可以访问代码的哪些部分。执行上下文可以总结如
下。
执行上下文分全局上下文、函数上下文和块级上下文。
代码执行流每进入一个新上下文，都会创建一个作用域链，用于
搜索变量和函数。
函数或块的局部上下文不仅可以访问自己作用域内的变量，而且
也可以访问任何包含上下文乃至全局上下文中的变量。
全局上下文只能访问全局上下文中的变量和函数，不能直接访问
局部上下文中的任何数据。
变量的执行上下文用于确定什么时候释放内存。
JavaScript是使用垃圾回收的编程语言，开发者不需要操心内存分
配和回收。JavaScript的垃圾回收程序可以总结如下。
离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被
删除。
主流的垃圾回收算法是标记清理，即先给当前不使用的值加上标
记，再回来回收它们的内存。
引用计数是另一种垃圾回收策略，需要记录值被引用了多少次。
JavaScript引擎不再使用这种算法，但某些旧版本的IE仍然会受这
种算法的影响，原因是JavaScript会访问非原生JavaScript对象（如
DOM元素）。
引用计数在代码中存在循环引用时会出现问题。
解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮
助。为促进内存回收，全局对象、全局对象的属性和循环引用都
应该在不需要时解除引用。


因为ECMAScript的类型系统是松散的，所以需要一种手段来确定任意变量的数据类型。 typeof 操作符就是为此而生的。对一个值使用 typeof 操作符会返回下列字符串之一：
"undefined" 表示值未定义；
"boolean" 表示值为布尔值；
"string" 表示值为字符串；
"number" 表示值为数值；
"object" 表示值为对象（而不是函数）或 null ；
"function" 表示值为函数；
"symbol" 表示值为符号。
Null 类型同样只有一个值，即特殊值 null 。逻辑上讲，null 值表示一个空对象指针，这也是给 typeof 传一个 null 会返回 "object" 的原因

在定义将来要保存对象值的变量时，建议使用 null 来初始化，不要使用其他值。这样，只要检查这个变量的值是不是 null 就可以知道这个变量是否在后来被重新赋予了一个对象的引用

用等于操作符（ == ）比较 null 和 undefined 始终返回true 。但要注意，这个操作符会为了比较而转换它的操作数。
即使 null 和 undefined 有关系，它们的用途也是完全不一样的。如前所述，永远不必显式地将变量值设置为 undefined 。但null 不是这样的。任何时候，只要变量要保存对象，而当时又没有那个对象可保存，就要用 null 来填充该变量。这样就可以保持null 是空对象指针的语义，并进一步将其与 undefined 区分开来。
null 是一个假值。因此，如果需要，可以用更简洁的方式检测它。不过要记住，也有很多其他可能的值同样是假值。所以一定要明确自己想检测的就是 null 这个字面值，而不仅仅是假值


第三天 


### 第 5 章 基本引用类型


#### 5.1 Date


Date 类型将日期保存为自协调世界时
（UTC，Universal Time Coordinated）时间1970年1月1日午夜（零时）至今
所经过的毫秒数。


要创建日期对象，就使用new 操作符来调用Date 构造函数：


```
let now = new Date();
```


**Date.parse()** 方法接收一个表示日期的字符串参数


**Date.parse()** 应该支持的日期格式，所有实现都必须支持下列日期格式：
“月/日/年”，如"5/23/2019" ；
“月名 日, 年”，如"May 23, 2019" ；
“周几 月名 日 年 时:分:秒 时区”，如"Tue May 23 2019 00:00:00GMT-0700" ；
ISO 8601扩展格式“YYYY-MM-DDTHH:mm:ss.sssZ”，如2019-05-
23T00:00:00 （只适用于兼容ES5的实现）。


**Date.UTC()** 方法也返回日期的毫秒表示


传给Date.UTC() 的参数是年、零起点月数（1月是0，2月是1，以此类推）、日（1~31）、时（0~23）、分、秒和毫秒。这些参数中，只有前两个（年和月）是必需的。


还提供了**Date.now()** 方法，返回表示方法执行时日期和
时间的毫秒数。


#### 5.1.1 继承的方法


Date 类型重写了toLocaleString() 、toString() 和valueOf() 方法。


toLocaleString() 方法返回与浏览器运行的本地环境一致的日期和时间。


toString() 方法通常返回带时区信息的日期和时间，而时间也是以24小时制（0~23）表示的。


valueOf() 方法根本就不返回字符串，这个方法被重写后返回的是日期的毫秒表示。


#### 5.1.2 日期格式化方法


toDateString() 显示日期中的周几、月、日、年（格式特定于实现）；
toTimeString() 显示日期中的时、分、秒和时区（格式特定于实现）；
toLocaleDateString() 显示日期中的周几、月、日、年（格式特定于实现和地区）；
toLocaleTimeString() 显示日期中的时、分、秒（格式特定于实现）；
toUTCString() 显示完整的UTC日期（格式特定于实现）。


#### 5.1.3 日期/时间组件方法


![image-20210120202551894](C:\Users\april\AppData\Roaming\Typora\typora-user-images\image-20210120202551894.png)


![image-20210120202640056](C:\Users\april\AppData\Roaming\Typora\typora-user-images\image-20210120202640056.png)


![image-20210120202728306](C:\Users\april\AppData\Roaming\Typora\typora-user-images\image-20210120202728306.png)


![image-20210120202816705](C:\Users\april\AppData\Roaming\Typora\typora-user-images\image-20210120202816705.png)


#### 5.2 RegExp正则表达式


正则表达式的pattern （模式）可以是任何简单或复杂的正则表
达式，包括字符类、限定符、分组、向前查找和反向引用。


每个正则表达式可以带零个或多个flags （标记），用于控制正则表达式的行为。下面给出了表示**匹配模式的标记**。


g ：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。
i ：不区分大小写，表示在查找匹配时忽略pattern 和字符串的大小写。
m ：多行模式，表示查找到一行文本末尾时会继续查找。
y ：粘附模式，表示只查找从lastIndex 开始及之后的字符串。
u ：Unicode模式，启用Unicode匹配。
s ： dotAll 模式，表示元字符. 匹配任何字符（包括\n 或\r ）。


**元字符在模式中也必须转义**


```
( [ { \ ^ $ | ) ] } ? * + .
```


因为RegExp 的模式参数是字符串，所以在某些情况下需要二次转义。


下表展示了几个正则表达式的字面量形式，以及使用RegExp 构造函数创建时对应的模式字符串。


![image-20210120210022705](C:\Users\april\AppData\Roaming\Typora\typora-user-images\image-20210120210022705.png)


#### 5.2.1 RegExp 实例属性


每个RegExp 实例都有下列属性，提供有关模式的各方面信息。
global ：布尔值，表示是否设置了g 标记。
ignoreCase ：布尔值，表示是否设置了i 标记。
unicode ：布尔值，表示是否设置了u 标记。
sticky ：布尔值，表示是否设置了y 标记。
lastIndex ：整数，表示在源字符串中下一次搜索的开始位置，始终从0开始。
multiline ：布尔值，表示是否设置了m 标记。
dotAll ：布尔值，表示是否设置了s 标记。
source ：正则表达式的字面量字符串（不是传给构造函数的模式字符串），没有开头和结尾的斜杠。
flags ：正则表达式的标记字符串。始终以字面量而非传入构造函数的字符串模式形式返回（没有前后斜杠）。


#### 5.2.2 RegExp 实例方法


主要方法是exec() ，主要用于配合捕获组使用。这个方法只接收一个参数，即要应用模式的字符串。如果找到了匹配项，则返回包含第一个匹配信息的数组；如果没找到匹配项，则返回null 。返回的数组虽然是Array 的实例，但包含两个额外的属性： index 和input 。index 是字符串中匹配模式的起始位置， input 是要查找的字符串。


**exec() 方法**用于检索字符串中的正则表达式的匹配。


另一个方法是**test()** ，接收一个字符串参数。如果输入的文本与模式匹配，则参数返回true ，否则返回false 。


#### 5.2.3 RegExp 构造函数属性


RegExp 构造函数的属性：


![image-20210120211129417](C:\Users\april\AppData\Roaming\Typora\typora-user-images\image-20210120211129417.png)


通过这些属性可以提取出与exec() 和test() 执行的操作相关的信息。


不同属性包含的内容如下:
**input** 属性中包含原始的字符串。
**leftConext** 属性包含原始字符串中"short" 之前的内容，
**rightContext** 属性包含"short" 之后的内容。
**lastMatch** 属性包含匹配整个正则表达式的上一个字符串，
即"short" 。
**lastParen** 属性包含捕获组的上一次匹配，即"s" 。


存储最多9个捕获组的匹配项可以通过通过RegExp.$1~RegExp.$9 来访问


#### 5.2.4 模式局限


联合及交叉类
原子组
x （忽略空格）匹配模式
条件式匹配
正则表达式注释


#### 5.3 原始值包装类型


为了方便操作原始值，ECMAScript提供了3种特殊的引用类型：
Boolean 、Number 和String 。


为什么在js中的原始值，可以调用方法，比如说：


```javascript
let str = 'I love China!';
console.log(str.slice(0,6));//I love
12
```


但是却不能给原始值添加属性


```javascript
str.age = 18;
console.log(str.age);//undefined
12
```


这一切都和原始值包装类型及其声明周期有关：每当用到某个原始值的属性或者方法使，javascript总会在后台创建一个原始值包装类型的对象，从而暴露出操作原始值的各种方法。


在以读模式访问字符串的方法或者属性时，总会在后台执行以下三步：
（1）创建一个原始值类型的实例
（2）调用这个实例上的方法（或读取这个实例上的属性）
（3）销毁这个实例
用代码表示出来则为：


```javascript
let str = new String('I love China!');
console.log(str.slice(0,6));
str = null;
123
```


所以在非严格模式下，当我们尝试给原始值赋值时`str.age=18`，其实是生成了一个原始值包装类型的，也是给它赋了值的，但是，这句话执行完之后，这个原始值包装类型就被销毁了。而在下一次再次读取这个属性时`console.log(str.age)`，其实又再次创建了一个原始值包装类型对象，这个对象和之前那个不是一个对象，所以`str.age`为`undefined`


#### 5.3.1 Boolean


Boolean 是对应布尔值的引用类型。要创建一个Boolean 对象，就使用Boolean 构造函数并传入true 或false。


Boolean 的实例会重写valueOf() 方法，返回一个原始值true或false 。toString() 方法被调用时也会被覆盖，返回字符串"true" 或"false" 。


#### 5.3.2 Number


Number 是对应数值的引用类型。要创建一个Number 对象，就使用Number 构造函数并传入一个数值。


与Boolean 类型一样， Number 类型重写了valueOf() 、
toLocaleString() 和toString() 方法。valueOf() 方法返回
Number 对象表示的原始数值，另外两个方法返回数值字符串。
toString() 方法可选地接收一个表示基数的参数，并返回相应基数形式
的数值字符串。


除了继承的方法， Number 类型还提供了几个用于将数值格式化为字符串的方法。
toFixed() 方法返回包含指定小数点位数的数值字符串。自动舍入的特点可以用于处理货币。不过要注意的是，
多个浮点数值的数学计算不一定得到精确的结果。


格式化数值的方法是toExponential() ，返回以科学记数法（也称为指数记数法）表示的数值字符串。


toPrecision() 方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。


isInteger() 方法与安全整数
ES6新增了Number.isInteger() 方法，用于辨别一个数值是否保存为整数。


#### 5.3.3 String


String 是对应字符串的引用类型。要创建一个String 对象，使用String 构造函数并传入一个数值。


String 对象的方法可以在所有字符串原始值上调用。


3个继承的方法valueOf() 、toLcaleString() 和toString() 都返回对象的原始字符串值。


**String 类型提供了很多方法来解析和操作字符串。**


1. JavaScript字符


charAt() 方法返回给定索引位置









