	第5章基本引用类型
	引用值（或者对象）是某个特定引用类型的实例。
	引用类型有时候也被称为对象定义，因为它们描述了自己的对象应有的属性和方法。
	对象被认为是某个特定引用类型的实例。新对象通过使用new操作符后跟一个构造函数（constructor）来创建。构造函数就是用来创建新对象的函数，比如下面这行代码：letnow=newDate();

	5.1Date
	间1970年1月1日午夜（零时）至今所经过的毫秒数。使用这种存储格式，Date类型可以精确表示1970年1月1日之前及之后285 616年的日期。要创建日期对象，就使用new操作符来调用Date构造函数：letnow=newDate();
	Date.parse()方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数。ECMA-262第5版定义了Date.parse()应该支持的日期格式，填充了第3版遗留的空白。所有实现都必须支持下列日期格式：“月/日/年”，如"5/23/2019"；
	代码示例：	letsomeDate=newDate(Date.parse("May23,2019"));

	继承的方法
	与其他类型一样，Date类型重写了toLocaleString()、toString()和valueOf()方法。但与其他类型不同，重写后这些方法的返回值不一样。Date类型的toLocaleString()方法返回与浏览器运行的本地环境一致的日期和时间。
	现代浏览器在这两个方法的输出上已经趋于一致。
	较老的浏览器上，每个方法返回的结果可能在每个浏览器上都是不同的。这些差异意味着toLocaleString()和toString()可能只对调试有用，不能用于显示。Date类型的valueOf()方法根本就不返回字符串，这个方法被重写后返回的是日期的毫秒表示。

	5.1.2日期格式化方法Date类型有几个专门用于格式化日期的方法，
它们都会返回字符串：
toDateString()显示日期中的周几、月、日、年（格式特定于实现）；
toTimeString()显示日期中的时、分、秒和时区（格式特定于实现）；
toLocaleDateString()显示日期中的周几、月、日、年（格式特定于实现和地区）；
toLocaleTimeString()显示日期中的时、分、秒（格式特定于实现）；
toUTCString()显示完整的UTC日期（格式特定于实现）。
这些方法的输出与toLocaleString()和toString()一样，会因浏览器而异
。因此不能用于在用户界面上一致地显示日期。
注意还有一个方法叫toGMTString()，这个方法跟toUTCString()是一样的，
目的是为了向后兼容。不过，规范建议新代码使用toUTCString()。

	日期/时间组件方法
	getTime()   返回日期的毫秒表示；与valueOf()相同
	setTime(milliseconds)   设置日期的毫秒表示，从而修改整个日期
	getFullYear()   返回4位数年（即2019而不是19）
	getUTCFullYear()  返回UTC日期的4位数年setFullYear(year)设置日期的年（year必须是4位数）
	setUTCFullYear(year)    设置UTC日期的年（year必须是4位数）getMonth()返回日期的月（0表示1月，11表示12月）
	getMonth()       返回日期的月（0表示1月，11表示12月）
	getUTCMonth()      返回UTC日期的月（0表示1月，11表示12月）
	setMonth(month)  设置日期的月（month为大于0的数值，大于11加年）
	setUTCMonth(month)    设置UTC日期的月（month为大于0的数值，大于11加年）
	getDate()返回日期中的日（1~31）	
	getUTCDate()返回UTC日期中的日（1~31）
	setDate(date)设置日期中的日（如果date大于该月天数，则加月）
	setUTCDate(date)设置UTC日期中的日（如果date大于该月天数，则加月）
	getDay()返回日期中表示周几的数值（0表示周日，6表示周六）
	getUTCDay()返回UTC日期中表示周几的数值（0表示周日，6表示周六）
	getHours()返回日期中的时（0~23）
	getUTCHours()返回UTC日期中的时（0~23）
	setHours(hours)设置日期中的时（如果hours大于23，则加日）
	setUTCHours(hours)设置UTC日期中的时（如果hours大于23，则加日）
	getMinutes()返回日期中的分（0~59）
	getUTCMinutes()返回UTC日期中的分（0~59）
	setMinutes(minutes)设置日期中的分（如果minutes大于59，则加时）
	setUTCMinutes(minutes)设置UTC日期中的分（如果minutes大于59，则加时）

	RegExp
	ECMAScript通过RegExp类型支持正则表达式。
	代码示例：	letexpression=/pattern/flags;
	这个正则表达式的pattern（模式）可以是任何简单或复杂的正则表达式，包括字符类、限定符、分组、向前查找和反向引用。每个正则表达式可以带零个或多个flags（标记），用于控制正则表达式的行为。

	g：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。
	i：不区分大小写，表示在查找匹配时忽略pattern和字符串的大小写。
	m：多行模式，表示查找到一行文本末尾时会继续查找。
	y：粘附模式，表示只查找从lastIndex开始及之后的字符串。
	u：Unicode模式，启用Unicode匹配。
	s：dotAll模式，表示元字符.匹配任何字符（包括\n或\r）。
	
	元字符在正则表达式中都有一种或多种特殊功能，所以要匹配上面这些字符本身，就必须使用反斜杠来转义。
	//匹配第一个"bat"或"cat"，忽略大小写letpattern1=/[bc]at/i;
	这里的pattern1匹配"bat"或"cat"，不区分大小写。要直接匹配"[bc]at"，左右中括号都必须像pattern2中那样使用反斜杠转义。在pattern3中，点号表示"at"前面的任意字符都可以匹配。如果想匹配".at"，那么要像pattern4中那样对点号进行转义。
	它接收两个参数：模式字符串和（可选的）标记字符串。

	//匹配第一个"bat"或"cat"，忽略大小写letpattern1=/[bc]at/i;//跟pattern1一样，只不过是用构造函数创建的letpattern2=newRegExp("[bc]at","i");

	这里的pattern1和pattern2是等效的正则表达式。
	所有元字符都必须二次转义，包括转义字符序列，如\n（\转义后的字符串是\\，在正则表达式字符串中则要写成\\\\）。
	RegExp实例属性
	每个RegExp实例都有下列属性，提供有关模式的各方面信息。
	global：布尔值，表示是否设置了g标记。
	ignoreCase：布尔值，表示是否设置了i标记。
	unicode：布尔值，表示是否设置了u标记。
	sticky：布尔值，表示是否设置了y标记。
	lastIndex：整数，表示在源字符串中下一次搜索的开始位置，始终从0开始。
	multiline：布尔值，表示是否设置了m标记。
	dotAll：布尔值，表示是否设置了s标记。
	source：正则表达式的字面量字符串（不是传给构造函数的模式字符串），没有开头和结尾的斜杠。
	flags：正则表达式的标记字符串。始终以字面量而非传入构造函数的字符串模式形式返回（没有前后斜杠）

	letpattern1=/\[bc\]at/i;console.log(pattern1.global);//false
console.log(pattern1.ignoreCase);//true
console.log(pattern1.multiline);//false
console.log(pattern1.lastIndex);//0c
onsole.log(pattern1.source);//"\[bc\]at"
console.log(pattern1.flags);//"i"

	但两个模式的source和flags属性是相同的。source和flags属性返回的是规范化之后可以在字面量中使用的形式。

	RegExp实例方法
	RegExp实例的主要方法是exec()，主要用于配合捕获组使用。这个方法只接收一个参数，即要应用模式的字符串。如果找到了匹配项，则返回包含第一个匹配信息的数组；如果没找到匹配项，则返回null。
	如果模式设置了全局标记，则每次调用exec()方法会返回一个匹配的信息。如果没有设置全局标记，则无论对同一个字符串调用多少次exec()，也只会返回第一个匹配的信息。
	上面例子中的模式没有设置全局标记，因此调用exec()只返回第一个匹配项（"cat"）。lastIndex在非全局模式下始终不变。
	这次模式设置了全局标记，因此每次调用exec()都会返回字符串中的下一个匹配项，直到搜索到字符串末尾。注意模式的lastIndex属性每次都会变化。在全局匹配模式下，每次调用exec()都会更新lastIndex值，以反映上次匹配的最后一个字符的索引。如果模式设置了粘附标记y，则每次调用exec()就只会在lastIndex的位置上寻找匹配项。粘附标记覆盖全局标记。lettext="cat,bat,sat,fat";letpattern=/.at/y;letmatches=pattern.exec(text);

	RegExp构造函数属性
	RegExp构造函数本身也有几个属性。
	input属性中包含原始的字符串。
leftConext属性包含原始字符串中"short"之前的内容，
rightContext属性包含"short"之后的内容。
lastMatch属性包含匹配整个正则表达式的上一个字符串，
即"short"。lastParen属性包含捕获组的上一次匹配，即"s"。
	RegExp还有其他几个构造函数属性，可以存储最多9个捕获组的匹配项。这些属性通过RegExp.$1~RegExp.$9来访问

	模式局限
	\A和\Z锚（分别匹配字符串的开始和末尾）联合及交叉类原子组x（忽略空格）匹配模式条件式匹配正则表达式注释

	原始值包装类型
	Boolean、Number和String。这些类型具有本章介绍的其他引用类型一样的特点，但也具有与各自原始类型对应的特殊行为。
	引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过new实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间。这意味着不能在运行时给原始值添加属性和方法。
	lets1="sometext";s1.color="red";console.log(s1.color);//undefined

	BooleanBoolean是对应布尔值的引用类型。
	要创建一个Boolean对象，就使用Boolean构造函数并传入true或false，如下例所示：letbooleanObject=newBoolean(true);

	Number
Number是对应数值的引用类型。要创建一个Number对象，就使用Number构造函数并传入一个数值
	letnumberObject=newNumber(10);与Boolean类型一样，Number类型重写了valueOf()、toLocaleString()和toString()方法。valueOf()方法返回Number对象表示的原始数值，另外两个方法返回数值字符串。toString()方法可选地接收一个表示基数的参数，并返回相应基数形式的数值字符串，

	String
String是对应字符串的引用类型。要创建一个String对象，使用String构造函数并传入一个数值，如下例所示：letstringObject=newString("helloworld");String对象的方法可以在所有字符串原始值上调用。3个继承的方法valueOf()、toLcaleString()和toString()都返回对象的原始字符串值。

	JavaScript字符串由16位码元（code unit）组成。对多数字符来说，每16位码元对应一个字符。换句话说，字符串的length属性表示字符串包含多少16位码元：letmessage="abcde";console.log(message.length);//5

	 字符串位置方法有两个方法用于在字符串中定位子字符串：indexOf()和lastIndexOf()。这两个方法从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回-1）。两者的区别在于，indexOf()方法从字符串开头开始查找子字符串，而lastIndexOf()方法从字符串末尾开始查找子字符串。

	单例内置对象：两个单例内置对象：Global和Math。
	Global对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。在全局作用域中定义的变量和函数都会变成Global对象的属性。本书前面介绍的函数，包括isNaN()、isFinite()、parseInt()和parseFloat()，实际上都是Global对象的方法。除了这些，Global对象上还有另外一些方法。
	URL编码方法
	eval()方法
	Global对象属性Global对象有很多属性，其中一些前面已经提到过了。像undefined、NaN和Infinity等特殊值都是Global对象的属性。此外，所有原生引用类型构造函数，比如Object和Function，也都是Global对象的属性。
	window对象
	Math对象提供了一些辅助计算的属性和方法。
	Math对象有一些属性，主要用于保存数学中的一些特殊值。
	min()和max()方法
	letmax=Math.max(3,54,32,16);console.log(max);
//54letmin=Math.min(3,54,32,16);console.log(min);//3

	小结

	JavaScript中的对象称为引用值，几种内置的引用类型可用于创建特定类型的对象。
引用值与传统面向对象编程语言中的类相似，但实现不同。
Date类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。
RegExp类型是ECMAScript支持正则表达式的接口，
提供了大多数基础的和部分高级的正则表达式功能。
JavaScript比较独特的一点是，函数实际上是Function类型的实例，
也就是说函数也是对象。因为函数也是对象，所以函数也有方法，可以用于增强其能力。
由于原始值包装类型的存在，JavaScript中的原始值可以被当成对象来使用。
有3种原始值包装类型：Boolean、Number和String。它们都具备如下特点。
每种包装类型都映射到同名的原始类型。以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。
涉及原始值的语句执行完毕后，包装对象就会被销毁。
当代码开始执行时，全局上下文中会存在两个内置对象：Global和Math。
其中，Global对象在大多数ECMAScript实现中无法直接访问。
不过，浏览器将其实现为window对象。所有全局变量和函数都是Global对象的属性。Math对象包含辅助完成复杂计算的属性和方法。


	这次的第5章笔记，实用性很强大，有多种使用列子，并且多次使用的代码都基本出现了，但是有的地方，官方语言较重，我看不懂，绕的太多。