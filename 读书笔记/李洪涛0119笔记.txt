动态属性：创建一个新对象可以随时添加修改和删除其属性和方法，不能有原始值否则会undefined
复制值：把一个对象的值复制给另一个 两个变量是独立的互不干扰就是浅拷贝
传递参数：参数和变量互不干扰
typeof对原始值有用但是对于引用数据类型用处不大这就用到了instanceof 如果是引用数据类型会返回true
执行上下文：全局上下文就是window对象
作用域链：全局作用域&函数作用域，如果在当前作用域中没有查到值，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。
变量声明：var 声明会被拿到函数或全局作用域的顶部也就是变量提升 let是没有的，let声明的变量在同一作用域下不可以重复声明会报错，而var可以。const不可以修改声明的变量其他地方和let类似
垃圾回收：标记清理：js中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。
引用计数的含义是：跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减 1。当这个值的引用次数变成 0 时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为 0 的值所占用的内存。
不再用到的内存，没有及时释放，就叫做内存泄漏