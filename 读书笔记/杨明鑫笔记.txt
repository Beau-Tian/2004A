阅读

1.DOM

1.1。文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在HTML中使用扩展的XML。DOM将整个页面抽象为一组分层节点。HTML或XML页面的每个组成部分都是一种节点，包含不同的数据

1.2.DOM Level 1的目标是映射文档结构，而DOM Level 2的目标则宽泛得多。
       DOM Level 2新增了以下模块，以支持新的接口。
       DOM视图：描述追踪文档不同视图（如应用CSS样式前后的文档）的接口。
       DOM事件：描述事件及事件处理的接口。
       DOM样式：描述处理元素CSS样式的接口。 
       DOM遍历和范围：描述遍历和操作DOM树的接口。

小结
JavaScript是一门用来与网页交互的脚本语言，包含以下三个组成部分。

ECMAScript：由ECMA-262定义并提供核心功能。
文档对象模型（DOM）：提供与网页内容交互的方法和接口。
浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。

JavaScript的这三个部分得到了五大Web浏览器（IE、Firefox、
Chrome、Safari和Opera）不同程度的支持。所有浏览器基本上对
ES5（ECMAScript 5）提供了完善的支持，而对ES6（ECMAScript 6）
和ES7（ECMAScript 7）的支持度也在不断提升。

2.HTML中的JavaScript
1.async ：可选。表示应该立即开始下载脚本，但不能阻止其他
页面动作，比如下载资源或等待其他脚本加载。只对外部脚本文
件有效。
2.charset ：可选。使用 src 属性指定的代码字符集。这个属
性很少使用，因为大多数浏览器不在乎它的值。
3.crossorigin ：可选。配置相关请求的CORS（跨源资源共
享）设置。默认不使用CORS。
4.defer ：可选。表示在文档解析和显示完成后再执行脚本是没
有问题的。只对外部脚本文件有效。在IE7及更早的版本中，对行
内脚本也可以指定这个属性。
5.integrity ：可选。允许比对接收到的资源和指定的加密签名
以验证子资源完整性（SRI，Subresource Intergrity）。如果接收到
的资源的签名与这个属性指定的签名不匹配，则页面会报错，脚
本不会执行。这个属性可以用于确保内容分发网络（CDN，
Content Delivery Network）不会提供恶意内容。
6.language ：废弃。最初用于表示代码块中的脚本语言
（如 "JavaScript" 、 "JavaScript
1.2" 或 "VBScript" ）。大多数浏览器都会忽略这个属性，
不应该再使用它。
7.src ：可选。表示包含要执行的代码的外部文件。

2.标签占位符
所有 <script> 元素都被放在页面的 <head> 标签内
这种做法的主要目的是把外部的CSS和JavaScript文件都集中放到
一起。不过，把所有JavaScript文件都放在 <head> 里，也就意味着
必须把所有JavaScript代码都下载、解析和解释完成后，才能开始渲染
页面（页面在浏览器解析到 <body> 的起始标签时开始渲染）。对于
需要很多JavaScript的页面，这会导致页面渲染的明显延迟，在此期间
浏览器窗口完全空白。为解决这个问题，现代Web应用程序通常将所
有JavaScript引用放在 <body> 元素中的页面内容后面

3.推迟执行脚本
HTML 4.01为 <script> 元素定义了一个叫 defer 的属性。这
个属性表示脚本在执行的时候不会改变页面的结构。因此，这个脚本完全可以在整个页面解析完之后再运行。在 <script> 元素上设置
defer 属性，会告诉浏览器应该立即开始下载，但执行应该推迟

4.行内代码与外部文件
虽然可以直接在HTML文件中嵌入JavaScript代码，但通常认为最
佳实践是尽可能将JavaScript代码放在外部文件中。不过这个最佳实践
并不是明确的强制性规则。

1.可维护性。JavaScript代码如果分散到很多HTML页面，会导致维
护困难。而用一个目录保存所有JavaScript文件，则更容易维护这样开发者就可以独立于使用它们的HTML页面来编辑代码
2.缓存。浏览器会根据特定的设置缓存所有外部链接的JavaScript文
件，这意味着如果两个页面都用到同一个文件，则该文件只需下
载一次。这最终意味着页面加载更快。
3.适应未来。通过把JavaScript放到外部文件中，就不必考虑用
XHTML或前面提到的注释黑科技。包含外部JavaScript文件的语
法在HTML和XHTML中是一样的。

在配置浏览器请求外部文件时，要重点考虑的一点是它们会占用
多少带宽。在SPDY/HTTP2中，预请求的消耗已显著降低，以轻量、
独立JavaScript组件形式向客户端送达脚本更具优势。

5.<noscript> 元素
针对早期浏览器不支持JavaScript的问题，需要一个页面优雅降级
的处理方案。最终， <noscript> 元素出现，被用于给不支持
JavaScript的浏览器提供替代内容。虽然如今的浏览器已经100%支持
JavaScript，但对于禁用JavaScript的浏览器来说，这个元素仍然有它的
用处。

<noscript> 元素可以包含任何可以出现在 <body> 中的
HTML元素， <script> 除外。在下列两种情况下，浏览器将显示包
含在 <noscript> 中的内容：
1.浏览器不支持脚本
2.浏览器对脚本的支持被关闭。

任何一个条件被满足，包含在 <noscript> 中的内容就会被渲
染。否则，浏览器不会渲染 <noscript> 中的内容

变量、作用域与内存

1. 原始值与引用值
ECMAScript变量可以包含两种不同类型的数据：原始值和引用
值。原始值（primitive value）就是最简单的数据，引用值（reference
value）则是由多个值构成的对象。

在把一个值赋给变量时，JavaScript引擎必须确定这个值是原始值
还是引用值。上一章讨论了6种原始值： Undefined 、 Null 、
Boolean 、 Number 、 String 和 Symbol 。保存原始值的变量
是按值（by value）访问的，因为我们操作的就是存储在变量中的实际值。

引用值是保存在内存中的对象。与其他语言不同，JavaScript不允
许直接访问内存位置，因此也就不能直接操作对象所在的内存空间在操作对象时，
实际上操作的是对该对象的引用（reference）而非实际的对象本身。为此，
保存引用值的变量是按引用（by reference）访问的。

1.1.2.动态属性
原始值和引用值的定义方式很类似，都是创建一个变量，然后给它赋一个值。不过，在变量保存了这个值之后，
可以对这个值做什么，则大有不同。对于引用值而言，可以随时添加、修改和删除其属性和方法。

1.1.3.复制值
除了存储方式不同，原始值和引用值在通过变量复制时也有所不
同。在通过变量把一个原始值赋值到另一个变量时，原始值会被复制
到新变量的位置。

1.1.4.传递参数
ECMAScript中所有函数的参数都是按值传递的。这意味着函数外
的值会被复制到函数内部的参数中，就像从一个变量复制到另一个变
量一样。如果是原始值，那么就跟原始值变量的复制一样，如果是引
用值，那么就跟引用值变量的复制一样。对很多开发者来说，这一块
可能会不好理解，毕竟变量有按值和按引用访问，而传参则只有按值
传递。

1.1.5.确定类型
typeof 操作符最适合用来判断一个变量是否为原始类型。更确切地说，
它是判断一个变量是否为字符串、数值、布尔值或 undefined 的最好方式。
如果值是对象或 null ，那么typeof 返回 "object"

2. 执行上下文与作用域
执行上下文（以下简称“上下文”）的概念在JavaScript中是颇为重要的。
变量或函数的上下文决定了它们可以访问哪些数据，以及它们的行为。
每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。
虽然无法通过代码访问变量对象，但后台处理数据会用到它。
全局上下文是最外层的上下文。

2.1 作用域链增强
虽然执行上下文主要有全局上下文和函数上下文两种（ eval()调用内部存在第三种上下文），
但有其他方式来增强作用域链。某些语句会导致在作用域链前端临时添加一个上下文，
这个上下文在代码执行后会被删除

2.2 变量声明
1. 使用 var 的函数作用域声明
在使用 var 声明变量时，变量会被自动添加到最接近的上下文。在函数中，
最接近的上下文就是函数的局部上下文。在with 语句中，最接近的上下文也是函数上下文。
如果变量未经声明就被初始化了，那么它就会自动被添加到全局上下文
2. 使用 let 的块级作用域声明ES6新增的 let 关键字跟 var 很相似，但它的作用域是块级的，
这也是JavaScript中的新概念。块级作用域由最近的一对包含花括号 {} 界定。
换句话说， if 块、 while 块、 function块，甚至连单独的块也是 let 声明变量的作用域。
3. 使用 const 的常量声明
除了 let ，ES6同时还增加了 const 关键字。使用 const 声明的变量必须同时初始化为某个值。
一经声明，在其生命周期的任何时候都不能再重新赋予新值。
4. 标识符查找
当在特定上下文中为读取或写入而引用一个标识符时，必须通过搜索确定这个标识符表示什么。
搜索开始于作用域链前端，以给定的名称搜索对应的标识符。
如果在局部上下文中找到该标识符，则搜索停止，变量确定；如果没有找到变量名，则继续沿作用域链搜索。

3. 垃圾回收
JavaScript是使用垃圾回收的语言，也就是说执行环境负责在代码执行时管理内存。
我们以函数中局部变量的正常生命周期为例。函数中的局部变量会在函数执行时存在。
3.1 标记清理
JavaScript最常用的垃圾回收策略是标记清理（mark-andsweep）。
当变量进入上下文，比如在函数内部声明一个变量时，这个变量会被加上存在于上下文中的标记。
而不在上下文中的变量，逻辑上讲，永远不应该释放它们的内存，因为只要上下文中的代码在运行，就有可能用到它们。
当变量离开上下文时，也会被加上离开上下文的标记。

3.2 引用计数
引用计数最早由Netscape Navigator 3.0采用，但很快就遇到了严重的问题：循环引用。
所谓循环引用，就是对象A有一个指针指向对象B，而对象B也引用了对象A。

3.3 性能
垃圾回收程序会周期性运行，如果内存中分配了很多变量，则可能造成性能损失，因此垃圾回收的时间调度很重要。
尤其是在内存有限的移动设备上，垃圾回收有可能会明显拖慢渲染的速度和帧速率。
开发者不知道什么时候运行时会收集垃圾，因此最好的办法是在写代码时就要做到：无论什么时候开始收集垃圾，都能让它尽快结束工作。

4.小结
JavaScript变量可以保存两种类型的值：原始值和引用值。原始值可能是以下6种原始数据类型之一：
 Undefined 、 Null 、Boolean 、 Number 、 String和 Symbol 。原始值和引用值有以下特点。

	* 
原始值大小固定，因此保存在栈内存上。


	* 
从一个变量到另一个变量复制原始值会创建该值的第二个副本。
	* 
引用值是对象，存储在堆内存上。
	* 
包含引用值的变量实际上只包含指向相应对象的一个指针，而不是对象本身。
	* 
从一个变量到另一个变量复制引用值只会复制指针，因此结果是两个变量都指向同一个对象。
	* 
typeof 操作符可以确定值的原始类型，而 instanceof 操作符用于确保值的引用类型。
	* 
执行上下文分全局上下文、函数上下文和块级上下文。
	* 
代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数。
	* 
函数或块的局部上下文不仅可以访问自己作用域内的变量，而且也可以访问任何包含上下文乃至全局上下文中的变量。
	* 
全局上下文只能访问全局上下文中的变量和函数，不能直接访问局部上下文中的任何数据。
	* 
变量的执行上下文用于确定什么时候释放内存
	* 
离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除。
	* 
主流的垃圾回收算法是标记清理，即先给当前不使用的值加上标记，再回来回收它们的内存。
	* 
引用计数是另一种垃圾回收策略，需要记录值被引用了多少次。


	* 
引用计数在代码中存在循环引用时会出现问题。
	* 
解除变量的引用不仅可以消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用。




第 5 章 基本引用类型引用值（或者对象）是某个特定引用类型的实例。引用类型有时候也被称为对象定义，
因为它们描述了自己的对象应有的属性和方法。对象被认为是某个特定引用类型的实例。
新对象通过使用 new 操作符后跟一个构造函数（constructor）来创建。
1 Date
1.1 继承的方法
与其他类型一样， Date 类型重写了 toLocaleString() 、toString() 和 valueOf() 方法。
但与其他类型不同，重写后这些方法的返回值不一样。 Date 类型的 toLocaleString() 方法返回与浏览器运行的本地环境一致的日期和时间。

现代浏览器在这两个方法的输出上已经趋于一致。在比较老的浏览器
上，每个方法返回的结果可能在每个浏览器上都是不同的。这些差异意味
着 toLocaleString() 和 toString() 可能只对调试有用，不能用于
显示。

Date 类型的 valueOf() 方法根本就不返回字符串，这个方法被重
写后返回的是日期的毫秒表示。因此，操作符（如小于号和大于号）可以直
接使用它返回的值。

1.2 日期格式化方法
Date 类型有几个专门用于格式化日期的方法，它们都会返回字符串：
toDateString() 显示日期中的周几、月、日、年（格式特定于实现）；
toTimeString() 显示日期中的时、分、秒和时区（格式特定于实现）；
toLocaleDateString() 显示日期中的周几、月、日、年（格式特定于实现和地区）；
toLocaleTimeString() 显示日期中的时、分、秒（格式特定于实现）；
toUTCString() 显示完整的UTC日期（格式特定于实现）。

2 RegExp
ECMAScript通过 RegExp 类型支持正则表达式。

g ：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。
i ：不区分大小写，表示在查找匹配时忽略 pattern 和字符串的大小写。
m ：多行模式，表示查找到一行文本末尾时会继续查找。
y ：粘附模式，表示只查找从 lastIndex 开始及之后的字符串。
u ：Unicode模式，启用Unicode匹配。
s ： dotAll 模式，表示元字符 . 匹配任何字符（包括 \n 或\r ）。
使用不同模式和标记可以创建出各种正则表达式

RegExp 构造函数属性
RegExp 构造函数本身也有几个属性。（在其他语言中，这种属性被称为静态属性。）
这些属性适用于作用域中的所有正则表达式，而且会根据最后执行的正则表达式操作而变化。
这些属性还有一个特点，就是可以通过两种不同的方式访问它们。换句话说，每个属性都有一个全名和一个简写。

3 原始值包装类型
为了方便操作原始值，ECMAScript提供了3种特殊的引用类型：
Boolean 、 Number 和 String 。这些类型具有本章介绍的其他引用类型一样的特点，但也具有与各自原始类型对应的特殊行为。
每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始值的各种方法。
Boolean
Boolean 是对应布尔值的引用类型。要创建一个 Boolean 对象，就使用 Boolean 构造函数并传入 true 或 false ，
Number
Number 是对应数值的引用类型。要创建一个 Number 对象，就使用 Number 构造函数并传入一个数值，
String
String 是对应字符串的引用类型。要创建一个 String 对象，使用 String 构造函数并传入一个数值

小结
JavaScript中的对象称为引用值，几种内置的引用类型可用于创建特定类型的对象。
引用值与传统面向对象编程语言中的类相似，但实现不同。Date 类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。
RegExp 类型是ECMAScript支持正则表达式的接口，提供了大多数基础的和部分高级的正则表达式功能。

由于原始值包装类型的存在，JavaScript中的原始值可以被当成对象来使用。有3种原始值包装类型： Boolean 、 Number 和 String 。它们都具备如下特点。
	* 
每种包装类型都映射到同名的原始类型。
	* 
以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。
	* 
涉及原始值的语句执行完毕后，包装对象就会被销毁。





