date
date 类型可以精确表示1970年1月1日之前及之后285 616年的日期

要创建日期对象
let now = new Date()

继承的方法
与其他类型一样  Date 类型重写了 toLocaleString() toString() 和 valueOf() 方法
重写后这些方法的返回值不一样

日期格式化方法
toDateString() 显示日期中的周几、月、日、年
toTimeString() 显示日期中的时、分、秒和时区
toLocaleDateString() 显示日期中的周几、月、日、年
toLocaleTimeString() 显示日期中的时、分、秒
toUTCString() 显示完整的UTC日期
这些方法的输出与 toLocaleString() 和 toString() 一样 会因浏览器而异

--------
日期/时间组件方法
getTime()
返回日期的毫
秒表示；与
valueOf() 相同

setTime(milliseconds)
设置日期的毫
秒表示，从而修改
整个日期

getFullYear()
返回4位数年
（即2019而不是
19）

getUTCFullYear()
返回UTC日期
的4位数年

setFullYear(year)
设置日期的年
（ year 必须是4
位数）

setUTCFullYear(year)
设置UTC日期
的年（ year 必须
是4位数）

getMonth()
返回日期的月
（0表示1月，11表 示12月）

getUTCMonth()
返回UTC日期
的月（0表示1月，
11表示12月）

setMonth(month)
设置日期的月
（ month 为大于
0的数值，大于11
加年）

setUTCMonth(month)
设置UTC日期
的月（ month 为
大于0的数值，大
于11加年）

getDate()
返回日期中的
日（1~31） 

getUTCDate()
返回UTC日期
中的日（1~31）

 setDate(date)
设置日期中的
日（如果 date 大
于该月天数，则加
月）

setUTCDate(date)
设置UTC日期
中的日（如果
date 大于该月天
数，则加月）

getDay()
返回日期中表
示周几的数值（0
表示周日，6表示
周六）
方法 说明

getUTCDay()
返回UTC日期
中表示周几的数值
（0表示周日，6表
示周六）

getHours()
返回日期中的
时（0~23） 

getUTCHours()
返回UTC日期
中的时（0~23） 

setHours(hours)
设置日期中的
时（如果 hours
大于23，则加日）

setUTCHours(hours)
设置UTC日期
中的时（如果
hours 大于23，
则加日）

getMinutes()
返回日期中的
分（0~59） 

getUTCMinutes()
返回UTC日期
中的分（0~59） 

setMinutes(minutes)
设置日期中的
分（如果
minutes 大于
59，则加时）

setUTCMinutes(minutes)
设置UTC日期
中的分（如果
minutes 大于
59，则加时）
方法 说明

getSeconds()
返回日期中的
秒（0~59）

 getUTCSeconds()
返回UTC日期
中的秒（0~59）

 setSeconds(seconds)
设置日期中的
秒（如果
seconds 大于
59，则加分）

setUTCSeconds(seconds)
设置UTC日期
中的秒（如果
seconds 大于
59，则加分）

getMilliseconds()
返回日期中的
毫秒

getUTCMilliseconds()
返回UTC日期
中的毫秒

setMilliseconds(milliseconds)
设置日期中的
毫秒

setUTCMilliseconds(milliseconds)
设置UTC日期
中的毫秒

getTimezoneOffset()
返回以分钟计
的UTC与本地时区
的偏移量（如美国
EST即“东部标准
时间”返回300，进
入夏令时的地区可
能有所差异）
--------

RegExp
ECMAScript通过 RegExp 类型支持正则表达式
let expression = /pattern/flags;
g ：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。
i ：不区分大小写，表示在查找匹配时忽略 pattern 和字符串的大小写。
m ：多行模式，表示查找到一行文本末尾时会继续查找。
y ：粘附模式，表示只查找从 lastIndex 开始及之后的字符串。
u ：Unicode模式，启用Unicode匹配。
s ： dotAll 模式，表示元字符 . 匹配任何字符（包括 \n 或 \r ）

RegExp 实例属性
global ：布尔值，表示是否设置了 g 标记。
ignoreCase ：布尔值，表示是否设置了 i 标记。
unicode ：布尔值，表示是否设置了 u 标记。
sticky ：布尔值，表示是否设置了 y 标记。
lastIndex ：整数，表示在源字符串中下一次搜索的开始位置，始
终从0开始。
multiline ：布尔值，表示是否设置了 m 标记。
dotAll ：布尔值，表示是否设置了 s 标记。
source ：正则表达式的字面量字符串（不是传给构造函数的模式字
符串），没有开头和结尾的斜杠。
flags ：正则表达式的标记字符串。始终以字面量而非传入构造函数
的字符串模式形式返回（没有前后斜杠）

RegExp 构造函数属性
input $_ 最后搜索的字符串
lastMatch $& 最后匹配的文本
lastParen $+ 最后匹配的捕获组
leftContext $` input 字符串中出现在
lastMatch 前面的文本
rightContext $' input 字符串中出现在
lastMatch 后面的文本

Boolean
Boolean 是对应布尔值的引用类型
要创建一个 Boolean 对象，就使用 Boolean 构造函数并传入 true 或 false

Number
Number 是对应数值的引用类型
要创建一个 Number 对象，就使用 Number 构造函数并传入一个数值

String
String 是对应字符串的引用类型要创建一个 String 对象，使
用 String 构造函数并传入一个数值









