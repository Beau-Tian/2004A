    转化成字符串：
    //1.
    //    var num=88
    //    console.log(typeof (num.toString()))
    //    console.log(typeof(String(num)))
    // 2.
    //    var num=88
    //    num=num.toString()  console.log(typeof (num))
    //    num=String(num)   console.log(typeof (num))
    // 3.
    //    var num1=99
    //    console.log(typeof(num1+''))
    // 4.
    //    var num1=99
    //    num1=num1+''
    //    console.log(typeof(num1))

      转换为数值类型:
     //parseInt()将字符串转成整数
    // parseFloat()将字符串转成小数
    // number()任意数据类型转成数值
    // var str1='99.88'
    // var bool=true
    // console.log(parseInt(str1))  99
    // console.log(parseFloat(str1))  99.88
    // console.log(number(bool))  1

     隐式数据类型转换
    // var str='100'
    // var num=99
    // console.log(str+num) 10099 拼接,只要有一边是字符串就是拼接
    // console.log(num-str) -1 相当于'100'转成100
    // var a='2'
    // var b=3
    // console.log(a+b) //23

    转成布尔值boolean()
    // "" null undefined NaN 0 -0 false 
    // 只有这7个值进行布尔值换换成false,其余都是true
    // var bool = 88
    // console.log(Boolean(bool)) //true

   求余 求模 --余数
        // var num1 = 5
        // var num2 = 8
        // var num3 = 72
        // console.log(num2 % num1) //3
        // console.log(12 % 5)  //2
        // console.log(3 % 5)   //3  不够除时,就是本身的数
        // console.log(10 % 5)  //0  整除了就是0


     ++  -- 
        // num1++ 先用后加  ++num1 先加后用
        // var num1 = 6
        // var num2 = ++num1
        // console.log(num1, num2) //7  7
       //num1肯定加1了，然后再用语法看num2
        var num1 = 6
        var num2 = num1++
        console.log(num1, num2) //7  6

  算数运算符:+ - * / % ++ --
      +一个是正常加法 二是字符串拼接
      %求余 求模  
      ++加一的操作
      --减一的操作
      a++先用后加
      ++a先加后用

  比较运算符:> < >= <= == === != !==  结果:true false
    > < >= <=
    // var num1=6
    // var num2=9
    // console.log(num1>num2) //false
    // console.log(num1<num2) //true
    // console.log(num1>=num2) //false
    // console.log(num1<=num2) //true
    //6<=9 满足一条即可
    == ===
    // ==相等 判断两个值是否相等 ===全等 不仅值相等,数据类型也要相等
    // console.log(99=='99') //true 值相同就可以
    // console.log(77==='77') //false 值相等但是数值类型不同
    != !==
    // !=不仅值相等,数据类型也要相等 !==两个值相等就行
    //  console.log(99!='99') //false 值相等数值类型不同
    //  console.log(77!=='77') //true 值相同就可以

   逻辑运算符:&&  ||  !
    // &&  并且 全真为真 console.log(8>5&&7<6)//false
    // ||  或者 全假为假 一真为真 console.log(8>5||7<6)//true 
    // !   取反 假变真 真变假 console.log(!(88>66)) //本来是true 取反为false

  赋值运算符:= += -= *= /= %=
  = 赋值 把=右边的值或表达式赋值给左边的变量
    // 例题1:+=
    //   var num=88
    //   num +=2 //num=num+2
    //   console.log(num) //90
    //例题2:%=
    //var num=12
    //num%=5 //num=num%5
    //console.log(num)  //2


  条件/三元/三目运算符
    // 条件表达式?结果1: 结果2;
    //条件表达式?条件为真执行的语句:条件为假执行的语句
    //5<3?alert('为真执行的语句'):alert('为假执行的语句')
    //例题:
    // var num=prompt('请输入一个1-100之间的数',88)
    // num%2==0?alert('偶数'):alert('奇数') //88能整除2,所以是偶数

  运算符的优先级:1先乘除后加减  2()优先级最高  3算数>比较>逻辑>赋值

 语句
    //分支语句类型：if , switch
    //单分支语句：条件为真执行,为假时不执行 
    //单分支语法：if(条件){执行语句为真时才执行}
    //双分支语法：if(){}else{}
    // 双分支例题：
    // var num=prompt('请输入一个数','55')
    // if(num%2==0){
    //     alert('偶数')
    // }
    // else{
    //     alert('奇数')
    // }

   多分支语句:if(表达式1){表达式1为真}else if(表达式2){表达式2为真}else(表达式3){表达式3为真}
        // var score=prompt('请输入你的分数','99')
        // if(score>90&&score<=100){
        //     alert('优秀')
        // }else if(score>80&&score<=90){
        //     alert('升班')   
        // }else if(score<80){
        //     alert('末班')
        // }
        //else{
	alert('请重新输出') 
         //}


  switch语句:一般用在判断固定值的情况,比如计算器
    //switch(变量){
    //     case 值1:
    //         语句1;
    //         break;
    //     case 值2:
    //         语句2;
    //         break;
    //     ....
    //     default:
    //         语句..;
    //         break;
    // }
    // 例题:
    // var ysf=prompt('请输入你要实现的计算','+')
    // switch(ysf){
    //     case '+':
    //         alert('你要进行的加法运算')
    //         break;
    //     case '-':
    //         alert('你要进行的减法运算')
    //         break;
    //     case '*':
    //         alert('你要进行的乘法运算')
    //         break;
    //     case '/':
    //         alert('你要进行的除法运算')
    //         break;
    //     default:
    //         alert('你输错了')
    //         break;
    // }

  for循环语句
    //()表达式 1.初始化变量 var i=0  2.循环条件检测 3.变量的更新 i++ 表达式之间;
    //{}循环体 每次循环执行的代码  
    //语法结构:
    //for(初始化变量;循环条件检测;更新变量值){
    //     循环体
    // }
    // ...
    
    // for循环三个条件:
     //               初始化变量 声明变量并赋值 i=0
    //                循环条件检测 决定循环执行还是结束 i<10
    //                更新变量值 避免死循环 i++


  跳转语句：与循环语句搭配使用
    // break 终止结束整个循环
    // continue 继续 跳过当次循环，执行下一次
    // for(var i=0;i<10;i++){
    //     if(i==2){
    //         continue;//缓换成break，输出结果就是01
    //     }
    //     console.log(i) //0 1 3 4 5 6 7 8 9
    // }

    //while循环：先判断条件，条件为真才执行,为假不执行
    // while(条件){
    //     循环体
    // }

    // var i=0;
    // while(i<5){
    //      console.log(i)
    //     i++;   //01234
    // }

    //do while循环:无论条件真假，都要执行一次
    // do {
    //    循环体
    // } while (条件);

    //  var i=0;
        //  do {
        //      console.log(i)
        //      i++;
        //  } while (i<5);   //01234

    嵌套for循环
    //* * * * *
    //* * * * *
    //* * * * *
    //* * * * *
    // for(var j=0;j<4;j++){  //外层循环是表示行
    //     for(var i=0;i<5;i++){  //内层循环是表示列
    //         document.write('* ') //加个空格作为间隔
    //     }
    //     document.write('<br>')
    // }  

        //* * * * * *
        //* * * * * 
        //* * * * 
        //* * * 
        //* *
        //* 
        // for(var j=0;j<6;j++){
        //     for(var i=j;i<6;i++){   //i=j就是行与列相等时
        //         document.write('* ')
        //     }
        //     document.write('<br>')
        // }

        //函数：是由事件驱动的或者被调用时执行的可重复利用的代码块
        //函数的创建：function 函数名（参数列表）{函数体}
        //声明函数 function
        // <button onclick="login()">登录成功</button> 
        // function login(){      //()参数列表 可有可无
        //  alert('欢迎登录')  //函数体
        // } 
        //onclick 点击事件 有时间驱动的或者被调用时执行的
        //函数调用 函数是不会自动执行的：1.在html标签中添加时间<button onclick=""></button>
        //2.在script标签中 函数名()                            

        //匿名函数/函数表达式
        //var fun=function(){
        //函数体
        //}

        //函数名的命名规则同变量名一样
        //字母 数字 下划线 $ 组成，不能数字开头
        //区分大小写
        //不能是JS关键字和保留字
        //一般函数命名遵循驼峰命名法

        //函数的参数：
        //实参:要求的是具体的数字 函数调用的时候写在()里的
        //形参:不是固定值 相当于变量 在函数创建的时候写在括号里a,b,c
        //例题:任意俩数之间所有的偶数求和的函数
    //     function Fun(a,b){
    //         var sum=0;
    //         for(var i=a;i<=b;i++){
    //               if(i%2==0){
    //                   sum+=i
    //               }
    //         } 
    //         document.write(sum+'<br>')
    //     }
    //   Fun(2,20)
   //例题：任意俩数之间所有的奇数求和的函数
//         function addFun(a,b){
//         var sum=0;
//         for(var i=a;i<=b;i++){
//             if(i%2==1){
//                 sum+=i;
//             }
//         }
//         document.write(sum+'<br>')
// }
// addFun(2,50)

    九九乘法表
        // for (var i = 1; i <= 9; i++) { //行
        //     for (var j = 1; j <= i; j++) {
        //         document.write(i + '*' + j + '=' + (i * j) + ' ')
        //     }
        //     document.write('<br>')
        // }
    随便一个数的乘法表
        //function fun(num){
        // for (var i = 1; i <= 9; i++) { //行
        //     for (var j = 1; j <= i; j++) {
        //         document.write(i + '*' + j + '=' + (i * j) + ' ')
        //     }
        //     document.write('<br>')
        // }
        // }
        // fun(6)
     匿名函数法:随便一个数的乘法表
        //var fun=function (num){
        // for (var i = 1; i <= num; i++) { //行
        //     for (var j = 1; j <= i; j++) {
        //         document.write(i + '*' + j + '=' + (i * j) + ' ')
        //     }
        //     document.write('<br>')
        // }
        // }
        // fun(6)

  函数返回值:
        //1.默认情况下函数返回值undefined
        //2.return 为函数设置返回值 终止函数运行
        //定义一个函数，该函数可以传入两个参数，找出两个参数之间的所有数的平均值，并返回
        // function Fun(a,b){
        //     var sum=0
        //     for(var i=a;i<=b;i++){
        //        sum+=i
        //     }
        //    return sum/(b-a+1)+'<br>' //用返回输出
        // }
        // document.write(Fun(3,5)) //4
        // document.write(Fun(1,5)) //3

    变量的作用域/变量的作用范围
    //全局变量:函数外面定义的变量,在当前文件有效
    //局部变量:函数内部定义的变量,只在当前函数内部有效
    // var str1='天气晴朗' //全局变量
    // function show(){
    //     var str2='哈哈哈'  //局部变量
    //     console.log(str2)  //哈哈哈
    // }
    // console.log(str1) //天气晴朗
    // console.log(str2) //报错 因为局部不能给全局使用

   声明提升:变量提升 函数提升
    //变量提升:
    // console.log(num)     //undefined
    // var num=88;          //全局变量
    // function show(){
    //     console.log(num)  //undefined
    //     var num=44;
    //     console.log(num); //44
    // }
    // show();
    // console.log(num) //88
    //函数提升:

  数组:1.是值的有序集合,每个值叫做一个元素,元素的位置我们称为索引或下标,从0开始,到arr.length-1
         2.单个变量储存多个数据的集合
    //创建一个数组,数组存储了多个数据
    //数组里面的每一个值称之为数组元素
    //数组元素可以是任意数据类型
    // var arr=['hello',111,true]  //创建数组 任意数据类型都可以
    // console.log(arr)            //输出
    // console.log(arr[0]) //hello //输出其中一个数组元素
    // arr[0]='奥利给'              //修改
    // console.log('修改之后的数组',arr) //修改之后输出
    // console.log(arr.length) //3      //长度为3

    //创建数据:1.var arr=[ ]  2.var arr=new Array()
    //访问数组:通过下标访问的 - 下标从0开始 
    //数组名[下标]
    //关于下标:下标从0开始,到arr.length-1
    //读取数组中的元素 console.log(arr[下标])
    //修改数组中的元素 arr[下标]='xxx'
    //数组的属性length:返回数组中元素的个数(具体有几个元素)
    //例题：
    // var cxq=['崔鑫琦',18,'女']
    // console.log(cxq)
    // cxq[0]='cxq'
    // console.log('修改之后',cxq)
    // console.log(cxq.length)

    遍历：
    //1.for循环来遍历数组
    // var arr=['苹果','葡萄','无花果']
    // for(var i=0;i<arr.length;i++){
    //     console.log(arr[i])
    // }
    //2.for in
    // var arr=['苹果','葡萄','无花果']
    // for(var i in arr){
    //     console.log(arr[i])
    // }

    //对数组中元素的添加，删除 ：
    //对数组的添加 push()末尾添加一个或多个 unshift()开头添加一个或多个
    // var arr=['王者','守望先锋','植物大战僵尸']
    // console.log('原数组',arr) //'王者','守望先锋','植物大战僵尸'
    // arr.push('斗地主','鬼吹灯') //'王者','守望先锋','植物大战僵尸','斗地主','鬼吹灯'
    // arr.unshift('植物大战僵尸') //'植物大战僵尸','王者','守望先锋','植物大战僵尸'
    //对数组的添加 pop()末尾删除一个 shift()开头删除一个
   //例题：
    // var arr=['崔鑫琦','1912A',18]
    // for(var i=0;i<arr.length;i++){
    //     console.log(arr[i])
    // }
    // arr.push('爱好吃')
    // arr.unshift('画画')
    // console.log(arr)

    //splice() 万能的添加，删除，替换
    //参数1:下标 参数2:数量 参数3...添加的元素
    // arr.splice(2,1) //从下标为2的开始删除 一个
    // arr.splice(2,1,'游戏1') //从下标为2的删除1个 添加一个游戏1
    // arr.splice(2,0,'游戏1','游戏2') //从下标为2的删除0个 添加游戏1游戏2
 
    reverse()倒序
    // var arr=[1,2,3,4,5]
    // arr.reverse()
    // console.log(arr) //54321

    sort()排序
    // var arr=[23,4,34,87,9,67]
    // arr.sort(function(a,b){
    //     return a-b //升序 从小到大
        // return b-a //降序 从大到小
    // })
    // console.log(arr)

       数组方法:
        //concat()拼接一个或多个数组 返回拼接后的数组
        // var arr1=[1,2,3]
        // var arr2=['a','b','c']
        // var arr3=['苹果','梨子','西瓜','香蕉']
        // var arr=arr1.concat(arr2,arr3)
        // console.log('拼接后的数组',arr) //全部都拼接输出了

        join()数组连接成字符串
        // var arr1=[1,2,3]
        // var arr2=['a','b','c']
        // var arr3=['苹果','梨子','西瓜','香蕉','火龙果']
        // console.log(arr3.join('**')) //苹果***梨子***西瓜***香蕉***火龙果
        // console.log(arr2) //数组
        // console.log(arr2.join()) //a,b,c
   
        slice() 截取
        // var arr=['苹果','梨子','西瓜','香蕉','山竹']
        // console.log(arr)
        // console.log(arr.slice(1,3)) //梨子,西瓜 从下标为1的开始截取到下标为3的 不包括3

        indexOf() 查找元素中第一次出现的位置 下标/索引 找到,返回下标 找不到,返回-1
        // var arr=['苹果','梨子','西瓜','香蕉']
        // console.log(arr.indexOf('苹果')) //0
        // console.log(arr.indexOf('黄瓜')) //-1

        lastIndexOf(); 查找元素在数组中最后一次出现的位置
        // var arr=['苹果','梨子','西瓜','香蕉']
        // console.log(arr.lastIndexOf('苹果')) //0
        // console.log(arr.lastIndexOf('黄瓜')) //-1

        instanceOf 判断一个对象是否是数组
        //1.arr instanceOf Array
        //2.Array.isArray(arr)
        // var arr = [];
        // str = '';
        // 1.instanceof
        // console.log(arr instanceof Array) //true
        // console.log(str instanceof Array) //false
        // 2. isArray();
        // console.log(Array.isArray(arr))  //true
        // console.log(Array.isArray(str)) //false

      创建字符串
        //1.var str1='12345dfg'
        //2.var str2=new String(12345dfg)
        //3.var str3=String(12345dfg)

        字符串的属性:length长度
        var arr='hello world'
        console.log(arr.length) //11

        字符串的访问:同数组类似,也可以通过下标来访问.不能对字符串里的字符进行修改
        //var arr='hello world'
        //console.log(arr[0]) //h 

        字符串的遍历:for 找到字符串中的每一个字符 
        // var str='hello world'
        // for(var i=0;i<str.length;i++){
        //     console.log(str[i]) 
        // }

        字符串的方法:用来操作字符串的
        //1.与下标相关的方法
        // charAt() 返回指定下标处的字符 作用[]
        // var str='hello world'
        // console.log(str.charAt(4)) //o 输出指定的字符串
        // for(var i=0;i<str.length;i++){
        //     console.log(str.charAt(i)) //输出所有字符串 hello world兼容性好
        //    或者
        //     console.log(str[i]) //输出所有字符串 hello world 
        // }
        //例题：
        // var str='cxq'
        // for(var i=0;i<str.length;i++){
        //     console.log(str.charAt(i)) //cxq
        //     console.log(str.charAt(1)) //x
        // }

        //2.concat()拼接 跟+的作用类似 一般用+
        // var str1='12345'
        // var str2='abc'
        // var str3='小机器人NB'
        // var str=str1.concat(str2,str3)
        // console.log(str)
        // console.log(str1+str2+str3) 

        //join() 数组转成字符串
        // var str='abcdef'
        //console.log(str.split('').reverse().join('')) //fedcba分割成数组,倒序,拼接成字符

        //split()分割 字符串转成数组
        // var str='hello world'
        // console.log(str.split(o)) //从参数指定的地方分割 从o左右分割
        // console.log(str.split('')) //每个参数都分割
        // console.log(str.split('',3)) //参数1每个参数都分割 参数2数组长度 3 

        replace(A,B) B替换A
        // var str='hello world'
        // console.log(str.replace('h','***')) //***ello world

        search()与indexOf()方法类似
        search()获取字符
        // var str='hello world' 
        // console.log(str.search('l')) //返回的是下标 2
        // console.log(str.length('c')) //找不到时 -1

        math()匹配 放进一个字符去匹配
        // var str='hello world' 
        // console.log(str.match('l')) //返回的是一个数组
        // console.log(str.match('c')) //找不到时null

        trim()去除字符串左右两边的空格
        // var str='   hello     world   '
        // console.log(str)         //   hello     world   
        // console.log(str.trim()) //hello     world

        转大小写
        // var str='hello world'
        // console.log(str.toLocaleLowerCase()) //转小写hello world
        // console.log(str.toUpperCase()) //转大写hello world

        字符串截取
        // var str='hello world'
        // console.log(str.slice(2,7)) //从下标2开始截取，到下标7不包括7
        // console.log(str.substring(2,7)) //从2-7截取 (2,7)和(7,2)一样的意思
        // console.log(str.substr(2,3)) //从下标2开始截取3个字符 指定字符串的长度

        inexOf()获取某个字符串或者字符串片段首次出现的位置
        // var str='hello world'
        // console.log(str.indexOf('l')) //2
        // console.log(str.indexOf('c')) //-1

        lastIndexOf()获取某个字符或者字符串片段最后一次出现的位置
        // var str='hello world'
        // console.log(str.lastIndexOf('l')) //9
        // console.log(str.lastIndexOf('c')) //-1

      Math对象：执行常见的算数任务
        //Math对象的方法：
        //abs返回数的绝对值
        // console.log(Math.abs(-5)) //5
        // console.log(Math.abs(99)) //9

        //pow(x,y)x的y次幂
        // console.log(Math.pow(2,2)) //4
        // console.log(Math.pow(2,3)) //8

        //sqrt() 几的平方根
        // console.log(Math.sqrt(9)) //3 几乘几等于9

        //max()返回几个数中的最大值
        // console.log(Math.max(1,2,3,4,5,6)) //6
        //min()返回几个数中的最小值
        // console.log(Math.min(1,2,3,4,5,6)) //1
        
        //ceil()向上取整 向大的取整
        // console.log(Math.ceil(5.1)) //6
        // console.log(Math.ceil(5.7)) //6
        // console.log(Math.ceil(-5.7)) //-5
        // console.log(Math.ceil(-5.1)) //-5

        //floor()向下取整
        // console.log(Math.floor(5.1)) //5
        // console.log(Math.floor(5.7)) //5
        // console.log(Math.floor(-5.7)) //-6
        // console.log(Math.floor(-5.1)) //-6

        //round() 四舍五入
        // console.log(Math.round(3.14)) //3
         // console.log(Math.round(3.74)) //4

        //Math.random() 随机生成0-1之间的随机数,包括0但不包括1 [0,1)
        // console.log(Math.random()) //随机一个0-1之间的数
        //通过random()引出来的两个公式：随机数公式 随机整数公式

        随机数公式：Math.random()*(最大值-最小值)+最小值
        //例题：1-20之间的随机数
        // for(var i=0;i<10;i++){
        //     console.log(Math.random()*(20-1)+1)
        // }

        随机整数公式：Math.floor(Math.random()*(最大值-最小值+1)+最小值)
        //例题：1-20之间的随机整数
        // for(var i=0;i<10;i++){
        //     console.log(Math.floor(Math.random()*(20-1+1)+1))
        // }


       BOM:浏览器对象模型,是用来窗口与窗口之间的通讯
        //window:Bom的顶层对象,核心对象
        //全局变量和全局方法相当于window的属性和方法
        //默认是window不写的
        // window的子对象:
        // document 文档
        // history 历史记录相关的信息
        // location 地址栏相关的信息
        // navigator 浏览器相关的信息
        // screen 电脑屏幕相关的信息

        screen 电脑屏幕相关信息:整个桌面
        // document.write('屏幕高',screen.height)
        // document.write('屏幕宽',screen.width)

        navigator 浏览器相关的信息
        // console.log(navigator)
        // document.write('浏览器的代码名',navigator.appCodeName)
        // document.write('浏览器的名称',navigator.appName)
        // document.write('浏览器的操作系统',navigator.platform)
        // document.write('操作系统使用的默认语言',navigator.language)


        history 历史记录相关的信息:模拟浏览器的前进后退
        // history.back 后退 history.forword 前进
        // function jump(){
        //     location.href='./01-BOM相关知识.html'
        // }
        // console.log('访问的urld的数量',history.length)

        location 地址栏相关的信息:获取或设置页面的url,并把浏览器从新定向到新的页面
        // 常用属性
        // console.log('完整的url',location.href)
        // url的组成: 协议  主机名  端口号  页面路径和文件名
        // console.log('web协议',location.protocol)
        // console.log('host=主机名+端口号',location.host)
        // console.log('主机名',location.hostname)
        // console.log('端口号',location.port)
        // console.log('页面路径和文件名',location.pathname)
        // location.assign(myUrl) 加载新的页面 
        // 例:location.assign("http:www.baidu.com")
        // location.reload() 从新加载当前文档,相当于刷新
        // location.replace() 用新的文档替换当前文档

        userAgent用户代理
        // document.write('<br>用户客户端',navigator.userAgent)
        // var info=navigator.userAgent; //用户代理信息
        // console.log(info)//判断info 里面有没有mobile 有就是移动端客户 没有就是pc端
        // if(info.indexOf('Mobile')==-1){ //判断是电脑端还是移动端
        //     alert('pc端') //电脑端
        // }
        // else{
        //     if(info.indexOf('Android')!=-1){ //判断移动端是不是安卓
        //         alert('安卓')
        //     }else if(info.indexOf('Safari')!=-1){ //判断移动端是不是苹果
        //         alert('苹果')
        //     }else{
        //         alert('其他')
        //     }
        // }

        window的方法和属性:innerHeight innerWidth open打开页面
        // close关闭当前页面 alert警示框 confirm确认框 prompt输入提示框
        // document.write('浏览器的有效区域高',innerHeight)
        // document.write('浏览器的有效区域宽',innerWidth)

        //<!-- <button onclick="openFun()">打开新窗口</button>
        //<button onclick="closeFun()">关闭</button> -->
        // function openFun(){
        //     // window.open() //打开空白标签页
        //     window.open('http://www.mi.com') //打开指定网络地址
        // }
        // function closeFun(){
        //     window.close()
        // }

        //confirm确认框 有确定和取消 确定是true 

     DOM:是文档对象模型,操作HTML标签的
        //作用:DOM能够动态的改变元素
        //页面加载的时候会解析成一个DOM树,在DOM树中所有内容都称为节点(node)
        //DOM中有哪些结点呢?
        //整个文档:document的节点
        //节点中最常用、最重要的是元素节点(element)
        //获取元素的语法:
        //<div id='box'>我是div</div>写在上边    
        //var oBox = document.getElementById('box')写在script中 
        //console.log(oBox) //输出
        //通过标签名来获取元素:返回值以伪数组的形式返回的
        // document.getElementsByTagName('标签名')
        // <ul> //写在上边
        //     <li>1</li>
        //     <li>2</li>
        //     <li>3</li>
        //     <li>4</li>
        //     <li>5</li>
        // </ul>
        //     <ul id='nav'>
        //         <li>新闻</li>
        //         <li>娱乐</li>
        //         <li>游侠</li>
        //         <li>动漫</li>
        //         <li>美妆</li>
        //     </ul>
        // var oLi=document.getElementsByTagName('li')
        // console.log(oLi) //类似于数组,集合返回
        // console.log(oLi[0]) //通过下标返回一个指定元素
        //li 遍历下标
        // for (var i = 0; i < oLi.length; i++) {
        //     console.log(oLi[i])
        // }

        //获取指定DOM对象里的li
        //先获取ul id:nav
        // var oNav=document.getElementsByTagName('nav')
        // console.log(oNav)
        // var oLi=oNav.getElementsByTagName('li')
        // console.log(oLi)

        //HTML5新增的获取元素方式
        // <div class='box'></div> //写在上边
        // <div></div>
        // 1.document.getElementsByClassName('class名') 
        // var oBox=document.getElementsByClassName('box')
        // console.log(oBox)

        // document.querySelector('选择器') //通过指定的选择器获取第一个对象
        // var oNav= document.querySelector('.box')
        // console.log(oNav)

        // document.querySelectorAll('选择器')//通过指定的选择器获取所有对象
        // var oBox= document.querySelectorAll('.box')
        // console.log(oBox)

        //快速获取方式
        // console.log('文档',document)
        // console.log('html',document.documentElement)
        // console.log('body',document.body)

        //事件基础
        //事件--触发--响应机制
        //网页中所有的元素都可以触发js事件--点击button按钮触发事件
        //事件三要素:事件源 事件类型 事件处理程序
        // <button id='btn'>点击按钮</button> //在上边写
        // var oBtn=document.getElementById('btn')
        // oBtn.onclick=function(){
        //     alert('点击按钮触发')
        // }

        // innerHTML innerText 
        // <button id='btn'>点击</button>
        // <div id='time'>显示当前的时间</div>
        // <p class='txt'></p>
        // var oBtn=document.getElementById('btn')
        // var oTime=document.querySelector('#time')
        // oBtn.onclick=function(){
        //     //oTime.innerHTML=new Date().toLocaleString()
        //     oTime.innerText=new Date().toLocaleString()
        // }
        // innerHtml innerText 区别
        // <p class='txt'></p> //在上边写
        // var oTxt=document.querySelector('.txt')
        // oTxt.innerHTML='<strong>王者荣耀</strong>' //加粗的王者荣耀 识别标签
        // oTxt.innerText='<strong>王者荣耀</strong>' //<strong>王者荣耀</strong> 不识别标签

        //获取属性的值
        // <button id='xz'>肖战</button> //在上边写
        // <button id='ycy'>杨超越</button>
        // <img src='../images/肖战.jpg' width='200px' height='300px'>
        //获取元素对象
        // var oImg=document.querySelector('img')
        // console.log(oImg)
        // //获取事件源
        // var oTuyi=document.querySelector('#tuyi')
        // var oTuer=document.querySelector('#tuer')
        // oTuyi.onclick=function(){
        //     oImg.src='../20161119125211_8CNSc.jpeg'
        // }
        // oTuer.onclick=function(){
        //     oImg.src='../20161118140005_sNAkW.thumb.700_0.jpeg'
        // }


        //获取
        // <button>点击</button>
        // <input type="text" value="请输入内容">
        // var oBtn=document.querySelector('button')
        // var oInput=document.querySelector('input')
        // oBtn.onclick=function(){
        //     oInput.value='葫芦娃'
        //     oInput.disabled=true //disabled禁用
        // }

        //分析案例
        // <input type="password"> //在上边写
        // <img src="../20161119125211_8CNSc.jpeg" alt="" width="20" height="20">
        // var oImg=document.querySelector('img')
        // var oInput=document.querySelector('input')
        // var flag=1 //标识 1密文 0明文
        // oImg.onclick=function(){
        //     if(flag==1){
        //          oInput.type='text'//密文转明文
        //          flag=0
        //     }else{
        //         oInput.type='password'
        //         flag=1
        //     }
        // }

   style 属性来操作的
    //元素对象.style.样式名=值
    //通过style属性设置的样式是行内样式 优先级最高
    // var oDiv=document.querySelector('div')
    // oDiv.onclick=function(){
    //     oDiv.style.width='200px'
    //     oDiv.style.border='5px solid yellow'
    //     pDiv.style.borderRadius='50%'
    // }

   节点:页面在加载的时候会加载成一颗DOM树
    //网页中的所有内容在dom中称为节点,每个节点都有节点属性
    //节点类型:文档节点 元素节点 注释节点 属性节点 内容节点
    //每个节点都有三个属性:节点类型 节点名称 节点值
    //nodeType节点类型 nodeName节点的名称 nodeValue节点值
    // var oDiv=document.querySelector('#box')
    // console.log('节点类型',oDiv.nodeType)
    // console.log('节点名称',oDiv.nodeName)
    // console.log('节点值',oDiv.nodeValue)
    //节点之间的关系:祖先 父子 同胞

    //节点遍历 不是for循环
    //childNodes获取所有子节点
    // var oDiv=document.querySelector('#div')
    // console.log('所有子节点',oDiv.childNodes)
    // console.log('第一个子节点',oDiv.childNodes[0])
    // firstChild('第一个子节点',oDiv.firstChild)
    // console.log('最后一个子节点',oDiv.lastChild)

    //兄弟节点 
    //previousSibling上一个兄弟节点
    //nextSibling下一个兄弟节点
    //parentNode父节点
    // console.log('div的父节点',oDiv.parentNode)

    //children所有子元素
    // console.log('所有子元素',oDiv.children)
    // console.log('第一个子元素',oDiv.children[0])
    //第一个子元素 最后一个子元素
    // console.log('第一个子元素',oDiv.firstElementChild)
    // console.log('最后一个子元素',oDiv.lastElementChild)

    //获取兄弟元素
    // console.log('上一个兄弟元素',oDiv.previousElementSibling)
    // console.log('下一个兄弟元素',oDiv.nextElementSibling)
    
    //获取父元素
    // console.log('父元素',oDiv.parentElement)
    //节点的创建:createElement('标签名')
    // var oBtn=document.querySelector('button')
    // var oUl=document.querySelector('ul')
    // oBtn.onclick=function(){
    //     var li=document.createElement('li')  //创建添加元素
    //     li.innerTHML='xxxxx'  //设置内容样式属性
    //     oUl.appendChild(li)  //添加
    // }
    //父元素.appendChild(子元素) 追加元素
    //父元素.insertBefore(要添加的子元素B,已有的子元素A) B元素

   删除节点的方法:
  1.要删除的元素.remove()  
  2.父元素.removeChild(要删除的子元素) 

//事件:用户或浏览器的操作
        //事件三要素:
        //1.获取事件源
        //2.绑定事件
        //3.事件处理程序
        // var div2=document.getElementById('div1')
        // div2.ondblclick=function(){
        //     console.log('123456')
        // }

        //事件类型:
        //1.窗口事件
        //2.鼠标事件
        //3.键盘事件
        //4.表单事件

        //窗口事件:
        //onload 页面中所有资源(图片 js,css文件 音频 视频)加载完成后触发    
        //window.onload=function(){}
        //oncancel 页面滚动条滚动时触发
        //window.oncancel=function(){}
        //onresize 当浏览器窗口被调整到一个新高度或宽度时,会触发onresize事件
        //window.onresize=function(){}

        //鼠标事件:
        //onclick 鼠标单击时
        //ondblclick 鼠标双击
        //oncontextmenu 右击
        //onmousedown 鼠标被按下时触发事件
        //onmouseup 鼠标抬起时触发
        //onmouseover 鼠标移入
        //onmouseout 鼠标移出
        //onmousemove 鼠标移动

        //表单事件:
        //表单控件的事件(所有能写在form标签里的):
        // onfocus获得焦点
        // onblur失去焦点
        // oninput正在输入时触发 还可以输入多少个字
        // onselect内容被选中时触发
        // onchange表单内容发生改变或者选框发生改变时触发的事件
        //表单form的事件:
        // onsubmit表单提交时触发 提交时写在了上边的网址上
        // onreset表单重置时触发

        
        //键盘事件
        // keydown 键盘按下
        // keypress 键盘按下 功能键不触发 上下左右箭头等
        // keyup 键盘抬起
        // document.onkeydown=function(){
        //     console.log('keydown-键盘按下')
        // }
        // document. keypress=function(){
        //     console.log(' keypress-键盘按下,功能键不触发')
        // }
        // document.onkeydkeyup=function(){
        //     console.log('keyup-键盘抬起')
        // }













